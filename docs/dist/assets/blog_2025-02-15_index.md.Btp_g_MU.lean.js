import{_ as a,c as n,a1 as o,o as l}from"./chunks/framework.BDxlaA_J.js";const h=JSON.parse('{"title":"Beginners Guide- How to Procedurally Generate Monsters","description":"Procemon - How to make Procedural Monstor.","frontmatter":{"title":"Beginners Guide- How to Procedurally Generate Monsters","description":"Procemon - How to make Procedural Monstor.","head":[["link",{"rel":"preload","as":"image","href":"https://akocdw82ai.ufs.sh/f/Jk6mQ2VBlE6tYhuuCPLr5NPLfyHCAXTI0wcDOVaRt3j1qU7e"}],["meta",{"name":"keywords","content":"Procemon: Procedural Generated Monstor."}],["meta",{"property":"og:description","content":"Procemon: Make Procedural Monstor."}],["meta",{"property":"og:image","content":"https://akocdw82ai.ufs.sh/f/Jk6mQ2VBlE6tYhuuCPLr5NPLfyHCAXTI0wcDOVaRt3j1qU7e"}],["meta",{"name":"twitter:description","content":"Procemon: Make Procedural Monstor."}],["meta",{"name":"twitter:image","content":"https://akocdw82ai.ufs.sh/f/Jk6mQ2VBlE6tYhuuCPLr5NPLfyHCAXTI0wcDOVaRt3j1qU7e"}]],"date":"2025-02-15T00:00:00.000Z"},"headers":[],"relativePath":"blog/2025-02-15/index.md","filePath":"blog/2025-02-15/index.md"}'),p={name:"blog/2025-02-15/index.md"};function e(t,s,F,r,c,i){return l(),n("div",null,s[0]||(s[0]=[o(`<h1 id="beginners-guide-how-to-procedurally-generate-monsters" tabindex="-1">Beginners Guide: How to Procedurally Generate Monsters <a class="header-anchor" href="#beginners-guide-how-to-procedurally-generate-monsters" aria-label="Permalink to &quot;Beginners Guide: How to Procedurally Generate Monsters&quot;">​</a></h1><p><a href="/blog">&lt;- Back to blogs</a></p><p><img src="https://akocdw82ai.ufs.sh/f/Jk6mQ2VBlE6tYhuuCPLr5NPLfyHCAXTI0wcDOVaRt3j1qU7e" alt="Cover"> Let’s turn random noise into cool monster sprites! This guide breaks down each step in simple terms. The complete TypeScript implementation creates organic-looking creatures while maintaining full control over their general shape!</p><h3 id="the-core-concept-masks-and-cellular-automata" tabindex="-1">The Core Concept: Masks and Cellular Automata <a class="header-anchor" href="#the-core-concept-masks-and-cellular-automata" aria-label="Permalink to &quot;The Core Concept: Masks and Cellular Automata&quot;">​</a></h3><p><img src="https://procemon.sairashgautam.com.np/?size=32&amp;color=lime&amp;background=black" alt="Example Image"></p><p><em>(Example Image) (Refresh And See It change)</em></p><p>Our solution combines two key techniques:</p><ol><li><p><strong>Shape masks</strong> - Template patterns that guide initial generation</p></li><li><p><strong>Cellular automata</strong> - Smoothing algorithm that creates organic shapes</p></li></ol><p>Let&#39;s break down the implementation piece by piece.</p><hr><h2 id="🌱-step-1-planting-seeds-with-random-noise" tabindex="-1">🌱 Step 1: Planting Seeds with Random Noise <a class="header-anchor" href="#🌱-step-1-planting-seeds-with-random-noise" aria-label="Permalink to &quot;🌱 Step 1: Planting Seeds with Random Noise&quot;">​</a></h2><p>We start by generating a chaotic pattern of pixels. Imagine throwing confetti at a grid and some spots get filled, others stay empty.</p><p><strong>Key Code</strong>:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#BDC4CC;">// Creates initial random pattern</span></span>
<span class="line"><span style="color:#DBB7FF;">_generate_random</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> y </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; y </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> size; y</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    const</span><span style="color:#91CBFF;"> row</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> boolean</span><span style="color:#F0F3F6;">[] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [];</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; x </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> size; x</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">      // Check mask value at this position</span></span>
<span class="line"><span style="color:#FF9492;">      const</span><span style="color:#91CBFF;"> maskValue</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.mask[y][x];</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#BDC4CC;">      // Apply rules:</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (Math.</span><span style="color:#DBB7FF;">random</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> maskValue </span><span style="color:#FF9492;">/</span><span style="color:#91CBFF;"> 2</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> Math.</span><span style="color:#DBB7FF;">random</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 0.2</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        row.</span><span style="color:#DBB7FF;">push</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// Place a pixel</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        row.</span><span style="color:#DBB7FF;">push</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// Leave empty</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.map.</span><span style="color:#DBB7FF;">push</span><span style="color:#F0F3F6;">([</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">row, </span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">row.</span><span style="color:#DBB7FF;">reverse</span><span style="color:#F0F3F6;">()]); </span><span style="color:#BDC4CC;">// Mirror for symmetry</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span></code></pre></div><hr><h2 id="🎭-step-2-controlling-shape-with-masks" tabindex="-1">🎭 Step 2: Controlling Shape with Masks <a class="header-anchor" href="#🎭-step-2-controlling-shape-with-masks" aria-label="Permalink to &quot;🎭 Step 2: Controlling Shape with Masks&quot;">​</a></h2><p>A <strong>mask</strong> acts like a stencil to guide where pixels can appear. Think of it as a probability map:</p><table tabindex="0"><thead><tr><th><strong>Mask Value</strong></th><th><strong>Meaning</strong></th></tr></thead><tbody><tr><td><strong>0</strong></td><td>Never place a pixel (0% chance)</td></tr><tr><td><strong>1</strong></td><td>50% chance to place a pixel</td></tr><tr><td><strong>2</strong></td><td>80% chance to place a pixel*</td></tr></tbody></table><p><em>*Even at 2, we add</em> <code>Math.random() &gt; 0.2</code> for natural variation</p><p><strong>Example Mask (Island Shape)</strong>:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#F0F3F6;">[</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">],</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">],</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">], </span><span style="color:#BDC4CC;">// Center has highest density</span></span>
<span class="line"><span style="color:#BDC4CC;">  // ... more rows ...</span></span>
<span class="line"><span style="color:#F0F3F6;">]</span></span>
<span class="line"></span></code></pre></div><p>This <strong>8x8</strong> mask stretches to your desired sprite size (e.g., <strong>32x32</strong>).</p><hr><h2 id="🧪-step-3-smoothing-with-cellular-automata" tabindex="-1">🧪 Step 3: Smoothing with Cellular Automata <a class="header-anchor" href="#🧪-step-3-smoothing-with-cellular-automata" aria-label="Permalink to &quot;🧪 Step 3: Smoothing with Cellular Automata&quot;">​</a></h2><p>Raw noise looks jagged. <strong>Cellular automata</strong> apply nature-inspired rules to create organic shapes.</p><h3 id="the-walk-function" tabindex="-1">The <code>walk()</code> Function <a class="header-anchor" href="#the-walk-function" aria-label="Permalink to &quot;The \`walk()\` Function&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#BDC4CC;">// Runs smoothing process</span></span>
<span class="line"><span style="color:#DBB7FF;">walk</span><span style="color:#F0F3F6;">(steps </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 4</span><span style="color:#F0F3F6;">, birthLimit </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">, deathLimit </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 4</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> steps; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.map </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">getNextGeneration</span><span style="color:#F0F3F6;">(birthLimit, deathLimit);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span></code></pre></div><p><strong>Rules for Each Cell</strong>:</p><ol><li><p>Count living neighbors (8 surrounding cells) <em>(Described Bellow)</em></p></li><li><p>Apply survival rules:</p><ul><li><p><strong>Steps</strong>: How many times to repeat smoothing</p></li><li><p><strong>Alive cell</strong>: Dies if neighbors ≤ <code>deathLimit</code> (default 4)</p></li><li><p><strong>Dead cell</strong>: Born if neighbors == <code>birthLimit</code> (default 5)</p></li></ul></li></ol><hr><h2 id="🔍-step-4-how-neighbor-checking-works" tabindex="-1">🔍 Step 4: How Neighbor Checking Works <a class="header-anchor" href="#🔍-step-4-how-neighbor-checking-works" aria-label="Permalink to &quot;🔍 Step 4: How Neighbor Checking Works&quot;">​</a></h2><p>We check all 8 surrounding cells (Moore neighborhood):</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> NEIGHBOR_OFFSETS</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">], [</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">], [</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">], </span><span style="color:#BDC4CC;">// Top row</span></span>
<span class="line"><span style="color:#F0F3F6;">  [ </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">],          [</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">],  </span><span style="color:#BDC4CC;">// Sides </span></span>
<span class="line"><span style="color:#F0F3F6;">  [ </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">], [</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">], [</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">]   </span><span style="color:#BDC4CC;">// Bottom row</span></span>
<span class="line"><span style="color:#F0F3F6;">];</span></span>
<span class="line"></span></code></pre></div><p><em>Visualization</em>:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#91CBFF;">X</span><span style="color:#91CBFF;"> X</span><span style="color:#91CBFF;"> X</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#91CBFF;">X</span><span style="color:#F0F3F6;"> █ </span><span style="color:#91CBFF;">X</span><span style="color:#BDC4CC;">  // Checks all &quot;X&quot; positions  </span></span>
<span class="line"><span style="color:#91CBFF;">X</span><span style="color:#91CBFF;"> X</span><span style="color:#91CBFF;"> X</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"></span></code></pre></div><hr><h3 id="the-getnextgeneration-function" tabindex="-1">The <code>getNextGeneration()</code> Function <a class="header-anchor" href="#the-getnextgeneration-function" aria-label="Permalink to &quot;The \`getNextGeneration()\` Function&quot;">​</a></h3><p>This applies the &quot;<em>life</em>&quot; rules to every pixel:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#DBB7FF;">getNextGeneration</span><span style="color:#F0F3F6;">(birthLimit: number, deathLimit: number) {</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> newGrid</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> boolean</span><span style="color:#F0F3F6;">[][] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [];</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> y </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; y </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.size; y</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    newGrid[y] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [];</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; x </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.size; x</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">      // Count living neighbors</span></span>
<span class="line"><span style="color:#FF9492;">      let</span><span style="color:#F0F3F6;"> liveNeighbors </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">      for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">const</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">dx</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">dy</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">of</span><span style="color:#91CBFF;"> NEIGHBOR_OFFSETS</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        const</span><span style="color:#91CBFF;"> ny</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> y </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> dy;</span></span>
<span class="line"><span style="color:#FF9492;">        const</span><span style="color:#91CBFF;"> nx</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> dx;</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.map[ny]?.[nx]) liveNeighbors</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">      // Apply survival rules</span></span>
<span class="line"><span style="color:#FF9492;">      const</span><span style="color:#91CBFF;"> isAlive</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.map[y][x];</span></span>
<span class="line"><span style="color:#F0F3F6;">      newGrid[y][x] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> isAlive </span></span>
<span class="line"><span style="color:#FF9492;">        ?</span><span style="color:#F0F3F6;"> liveNeighbors </span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> deathLimit </span><span style="color:#BDC4CC;">// Survive if enough neighbors</span></span>
<span class="line"><span style="color:#FF9492;">        :</span><span style="color:#F0F3F6;"> liveNeighbors </span><span style="color:#FF9492;">===</span><span style="color:#F0F3F6;"> birthLimit; </span><span style="color:#BDC4CC;">// Born if perfect neighbor count</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> newGrid;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span></code></pre></div><hr><h2 id="🎨-step-5-drawing-your-monster" tabindex="-1">🎨 Step 5: Drawing Your Monster <a class="header-anchor" href="#🎨-step-5-drawing-your-monster" aria-label="Permalink to &quot;🎨 Step 5: Drawing Your Monster&quot;">​</a></h2><p>Convert the grid into visible art!</p><h3 id="canvas-rendering" tabindex="-1">Canvas Rendering: <a class="header-anchor" href="#canvas-rendering" aria-label="Permalink to &quot;Canvas Rendering:&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#DBB7FF;">plot_canvas</span><span style="color:#F0F3F6;">(canvas) {</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> ctx</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> canvas.</span><span style="color:#DBB7FF;">getContext</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;2d&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  ctx.fillStyle </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;white&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#91CBFF;">  this</span><span style="color:#F0F3F6;">.map.</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">((</span><span style="color:#FFB757;">row</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    row.</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">((</span><span style="color:#FFB757;">alive</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (alive) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        ctx.</span><span style="color:#DBB7FF;">fillRect</span><span style="color:#F0F3F6;">(x </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> blockSize, y </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> blockSize, blockSize, blockSize);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    });</span></span>
<span class="line"><span style="color:#F0F3F6;">  });</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="svg-output-perfect-for-web" tabindex="-1">SVG Output (Perfect for Web) <a class="header-anchor" href="#svg-output-perfect-for-web" aria-label="Permalink to &quot;SVG Output (Perfect for Web)&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#DBB7FF;">plot_svg</span><span style="color:#F0F3F6;">(bgColor: string, pixelColor: string) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> svg </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> \`&lt;svg viewBox=&quot;0 0 \${</span><span style="color:#91CBFF;">this</span><span style="color:#ADDCFF;">.</span><span style="color:#F0F3F6;">size</span><span style="color:#ADDCFF;">} \${</span><span style="color:#91CBFF;">this</span><span style="color:#ADDCFF;">.</span><span style="color:#F0F3F6;">size</span><span style="color:#ADDCFF;">}&quot;&gt;\`</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  svg </span><span style="color:#FF9492;">+=</span><span style="color:#ADDCFF;"> \`&lt;rect width=&quot;100%&quot; height=&quot;100%&quot; fill=&quot;\${</span><span style="color:#F0F3F6;">bgColor</span><span style="color:#ADDCFF;">}&quot;/&gt;\`</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#91CBFF;">  this</span><span style="color:#F0F3F6;">.map.</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">((</span><span style="color:#FFB757;">row</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    row.</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">((</span><span style="color:#FFB757;">alive</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (alive) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        svg </span><span style="color:#FF9492;">+=</span><span style="color:#ADDCFF;"> \`&lt;rect x=&quot;\${</span><span style="color:#F0F3F6;">x</span><span style="color:#ADDCFF;">}&quot; y=&quot;\${</span><span style="color:#F0F3F6;">y</span><span style="color:#ADDCFF;">}&quot; width=&quot;1&quot; height=&quot;1&quot; fill=&quot;\${</span><span style="color:#F0F3F6;">pixelColor</span><span style="color:#ADDCFF;">}&quot;/&gt;\`</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    });</span></span>
<span class="line"><span style="color:#F0F3F6;">  });</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">  svg </span><span style="color:#FF9492;">+=</span><span style="color:#ADDCFF;"> &quot;&lt;/svg&gt;&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> svg;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span></code></pre></div><hr><h2 id="🌟-bringing-it-all-together" tabindex="-1">🌟 Bringing It All Together <a class="header-anchor" href="#🌟-bringing-it-all-together" aria-label="Permalink to &quot;🌟 Bringing It All Together&quot;">​</a></h2><ol><li><strong>Mask Template</strong> → 2. <strong>Noisy Pattern</strong> → 3. <strong>Smoothed Shape</strong></li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FFB757;">Mask</span><span style="color:#F0F3F6;">:       </span><span style="color:#FFB757;">Initial</span><span style="color:#F0F3F6;">:      After </span><span style="color:#FFB757;">Smoothing</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">0</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">       █ █ █         █████  </span></span>
<span class="line"><span style="color:#91CBFF;">0</span><span style="color:#91CBFF;"> 1</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">  →   █   █   →     █   █  </span></span>
<span class="line"><span style="color:#91CBFF;">0</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">         █           █████  </span></span>
<span class="line"></span></code></pre></div><p><strong>Example</strong>:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#BDC4CC;">// Create a 32px island-shaped monster</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> monster</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Procemon</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">32</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">, maskType.island);</span></span>
<span class="line"><span style="color:#F0F3F6;">monster.</span><span style="color:#DBB7FF;">walk</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// Smooth 4 times</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> svgCode</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> monster.</span><span style="color:#DBB7FF;">plot_svg</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;black&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;#FF00FF&quot;</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// Pink monster!</span></span>
<span class="line"></span></code></pre></div><hr><h2 id="experiment" tabindex="-1">Experiment! <a class="header-anchor" href="#experiment" aria-label="Permalink to &quot;Experiment!&quot;">​</a></h2><ul><li><p><strong>Try New Masks</strong>: Create spiky, round, or winged shapes</p></li><li><p><strong>Adjust Rules</strong>: <code>monster.walk(3, 4, 3)</code> creates denser monsters</p></li><li><p><strong>Go Colorful</strong>: Use <code>plot_svg(&quot;navy&quot;, &quot;gold&quot;)</code> for royal creatures</p></li></ul><p>Procedural generation lets you create infinite unique sprites. No two monsters will ever be the same! 🎮👾</p><p><em>Full code and interactive demo available on</em> <a href="https://github.com/sairash/procemon" target="_blank" rel="noreferrer">github.com/sairash/procemon</a> and <a href="https://procemon.sairashgautam.com.np/?size=32&amp;color=lime&amp;background=black" target="_blank" rel="noreferrer">procemon.sairashgautam.com.np/?size=32&amp;color=lime&amp;background=black</a></p>`,57)]))}const d=a(p,[["render",e]]);export{h as __pageData,d as default};
