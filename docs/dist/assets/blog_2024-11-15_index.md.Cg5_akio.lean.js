import{_ as s,c as e,a1 as n,o}from"./chunks/framework.BDxlaA_J.js";const l="/mascot/bye-hippo.png",F=JSON.parse('{"title":"Is javascript actually compiled?","description":"","frontmatter":{"title":"Is javascript actually compiled?","date":"2024-11-15T00:00:00.000Z"},"headers":[],"relativePath":"blog/2024-11-15/index.md","filePath":"blog/2024-11-15/index.md"}'),t={name:"blog/2024-11-15/index.md"};function p(c,a,i,r,d,u){return o(),e("div",null,a[0]||(a[0]=[n(`<h1 id="is-javascript-actually-compiled" tabindex="-1">Is javascript actually compiled? <a class="header-anchor" href="#is-javascript-actually-compiled" aria-label="Permalink to &quot;Is javascript actually compiled?&quot;">​</a></h1><p><a href="/blog">&lt;- Back to blogs</a></p><details class="details custom-block" open=""><summary>Refrence</summary><p>Kyle Simpson’s Book on Scope &amp; Closures - <a href="https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/README.md" target="_blank" rel="noreferrer">PDF</a></p></details><h3 id="hoisting" tabindex="-1">Hoisting <a class="header-anchor" href="#hoisting" aria-label="Permalink to &quot;Hoisting&quot;">​</a></h3><p>While making my own programming language <code>Danfe</code> I got to a situation where if I call a function before creating it I get an <code>error</code>.</p><div class="language-danfe vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#DBB7FF;">function_to_print</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> function_to_print</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Hello from sairash!&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#91CBFF;font-weight:bold;"># Output</span></span>
<span class="line"><span style="color:#F0F3F6;">cli execution error: src.errors_df.DfError: </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">                                       </span></span>
<span class="line"><span style="color:#F0F3F6;">Error Encountered when eval -&gt; call_exp: </span></span>
<span class="line"><span style="color:#F0F3F6;">hello.df:1:1: undefined: function_to_print</span></span>
<span class="line"></span></code></pre></div><p>If you think about it, It is the way it should work right? As all programs are executed line by line and if you don&#39;t have function defined first it doesn&#39;t know about the function. So in return it gives an error. But I have been spoiled by javascript and if you write the same program in javascript.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#DBB7FF;">function_to_print</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> function_to_print</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Hello from sairash!&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span></code></pre></div><p>We get:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#91CBFF;font-weight:bold;"># Output</span></span>
<span class="line"><span style="color:#F0F3F6;">Hello from sairash!</span></span>
<span class="line"></span></code></pre></div><p>Now why is that let&#39;s take a closer look.</p><h2 id="lexical-scope-and-closures" tabindex="-1">Lexical scope and closures <a class="header-anchor" href="#lexical-scope-and-closures" aria-label="Permalink to &quot;Lexical scope and closures&quot;">​</a></h2><p>Well the first question that I asked was is Javascript actually compiled? Actually the simple answer is no, it falls under the category of &#39;dynamic&#39; or &#39;interpreted&#39; languages. But in a way it works like a compiler too.</p><h3 id="scoping-while-lexical-analysis" tabindex="-1">Scoping while lexical analysis: <a class="header-anchor" href="#scoping-while-lexical-analysis" aria-label="Permalink to &quot;Scoping while lexical analysis:&quot;">​</a></h3><p>When you start a js execution, the source code is sent by the engine through to a &quot;compiler&quot;, in which while the code is being lexed or tokenized the scopes are defined accourdingly.</p><p>for example:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> b;</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;hello&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span></code></pre></div><p>As the lexical analyser encounters the variable declaration for <em>a(var a)</em> it askes scope engine to see if the variable <em>a</em> is already defined for that scope. If yes, it just ignores it, otherwise it asks scope to create a new variable named <em>a</em> fo that scope.</p><h3 id="js-engine-working-with-scope" tabindex="-1">JS engine working with scope: <a class="header-anchor" href="#js-engine-working-with-scope" aria-label="Permalink to &quot;JS engine working with scope:&quot;">​</a></h3><p>When the engine starts to execute the lexed code, the above code is changed to:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;hello&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span></code></pre></div><p>If you see the defference, it is missing a var keyword, as it was already declared by the scoping engine. Kyle suggests in his book that the conversation between engine and scope could sound like:</p><blockquote><p>Compiler: Hey, Scope Manager, I found a formal declaration for an identifier called <code>b</code>, ever heard of it?</p></blockquote><blockquote><p>Scope Manager: Nope, never heard of it, so I just created it for you.</p></blockquote><blockquote><p>Compiler: Hey, Scope Manager, I found a formal declaration for an identifier called <code>a</code>, ever heard of it?</p></blockquote><blockquote><p>Scope Manager: Nope, never heard of it, so I just created it for you.</p></blockquote><blockquote><p>Compiler: Thankyou, now can you assign the string &#39;hello&#39; to <code>a</code> .</p></blockquote><blockquote><p>...</p></blockquote><p>So now, we understand what scope is. But what happen in the case of nested scopes? Where will the engine go look at? Engine looks at it&#39;s current scope than goes to the previous scope and it continues until it is not foud or returns the value when the variable is found.</p><h3 id="function-and-block-level-scope" tabindex="-1">Function and Block level scope <a class="header-anchor" href="#function-and-block-level-scope" aria-label="Permalink to &quot;Function and Block level scope&quot;">​</a></h3><p>You got to know what a scope is, but what creates a scope? A block creates it for example everything that is inside the <code>{}</code> punctuation in js creates a seperate scope for it self.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">    let</span><span style="color:#F0F3F6;"> data_number </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">( data_number ); </span><span style="color:#BDC4CC;">// 10</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">( data_number ); </span><span style="color:#BDC4CC;">// ReferenceError</span></span>
<span class="line"></span></code></pre></div><h3 id="describe-about-hoisting" tabindex="-1">Describe about Hoisting <a class="header-anchor" href="#describe-about-hoisting" aria-label="Permalink to &quot;Describe about Hoisting&quot;">​</a></h3><p>The thing that happend <a href="./#hoisting">here</a> is called hoisting. Where you can invoke a function even before it is declared and the code runs even just as if the opposite happend.</p><h3 id="closures" tabindex="-1">Closures <a class="header-anchor" href="#closures" aria-label="Permalink to &quot;Closures&quot;">​</a></h3><p>In the book Kyle gives a very straightforward defination for what a closure is:</p><blockquote><p>Clouser is when a function is able to remember and access it&#39;s lexical scope even when that function is executing outside it&#39;s lexical scope.</p></blockquote><p>This means that a function <em>bar</em> defined inside a function <em>foo</em> will have full access to the outer scope of <em>foo</em>, also if being returned within it and invoked outside of <em>foo</em>. It sounds very complex but this example will make it very clear.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">() {  </span><span style="color:#BDC4CC;">// &#39;scope of foo&#39; aka lexical scope for bar</span></span>
<span class="line"><span style="color:#FF9492;">   var</span><span style="color:#F0F3F6;"> memory </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;hello closure&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">   return</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> bar</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">      console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(memory);</span></span>
<span class="line"><span style="color:#F0F3F6;">   }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> memory </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">    baz </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#DBB7FF;">baz</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// &#39;hello closure&#39;</span></span>
<span class="line"></span></code></pre></div><p>This was a very good find, I knew the concept of it beofre but looking at it raw and going through everything was good. I will be implementing the same thing in my language soon too.</p><p><a href="https://letterbird.co/sai" target="_blank" rel="noreferrer">Reply via Email</a></p><p><span style="color:gray;font-size:14px;">Date: 2024-11-15</span><img src="`+l+'" style="height:170px;position:absolute;right:0;"></p>',43)]))}const y=s(t,[["render",p]]);export{F as __pageData,y as default};
