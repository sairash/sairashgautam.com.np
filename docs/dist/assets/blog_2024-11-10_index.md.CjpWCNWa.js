import{_ as s,c as d,a1 as t,o as n}from"./chunks/framework.GKu-Ijuu.js";const e="/mascot/woe-is-me.png",y=JSON.parse('{"title":"Writing a .bf interpreter","description":"","frontmatter":{"title":"Writing a .bf interpreter","date":"2024-11-10T00:00:00.000Z"},"headers":[],"relativePath":"blog/2024-11-10/index.md","filePath":"blog/2024-11-10/index.md"}'),l={name:"blog/2024-11-10/index.md"};function p(o,a,r,c,v,F){return n(),d("div",null,a[0]||(a[0]=[t(`<h1 id="writing-a-bf-interpreter" tabindex="-1" data-v-954d5869>Writing a .bf interpreter <a class="header-anchor" href="#writing-a-bf-interpreter" aria-label="Permalink to &quot;Writing a .bf interpreter&quot;" data-v-954d5869>‚Äã</a></h1><p data-v-954d5869>Curious about what ‚Äú.bf‚Äù is? Don‚Äôt worry‚Äîyou‚Äôre not alone! The ‚Äú.bf‚Äù extension belongs to <code data-v-954d5869>Brainfuck</code>, an &quot;esoteric language&quot; or esolang. Unlike conventional programming languages, esolangs are designed to push the boundaries of how we think about programming. Brainfuck, invented by Urban M√ºller in <code data-v-954d5869>1993</code>, is a classic in this genre. M√ºller created it with the ambitious goal of making a language for which he could write the smallest possible compiler‚Äîa feat he achieved with a compiler just 240 bytes in size ü§Ø.</p><p data-v-954d5869>I‚Äôve always been fascinated by the quirks of esoteric languages, so I decided to dive into Brainfuck by creating my own interpreter for it. And, just to add a personal twist, I built the interpreter in a language I developed myself, called Danfe! Brainfuck, despite its intimidating name, only uses eight characters: <code data-v-954d5869>&gt;</code>, <code data-v-954d5869>&lt;</code>, <code data-v-954d5869>+</code>, <code data-v-954d5869>-</code>, <code data-v-954d5869>.</code>, <code data-v-954d5869>,</code>, <code data-v-954d5869>[</code>, and <code data-v-954d5869>]</code>. Each character has a unique function, and together, they create a surprisingly powerful (and challenging!) language. Let‚Äôs break down what each symbol does and explore how they fit together in this mind-bending language.</p><h2 id="explaining-characters" tabindex="-1" data-v-954d5869>Explaining Characters <a class="header-anchor" href="#explaining-characters" aria-label="Permalink to &quot;Explaining Characters&quot;" data-v-954d5869>‚Äã</a></h2><table tabindex="0" data-v-954d5869><thead data-v-954d5869><tr data-v-954d5869><th data-v-954d5869>Keyword</th><th data-v-954d5869>Info</th><th data-v-954d5869>C equivalent</th></tr></thead><tbody data-v-954d5869><tr data-v-954d5869><td data-v-954d5869><code data-v-954d5869>&gt;</code></td><td data-v-954d5869>Increment the pointer.</td><td data-v-954d5869>++p</td></tr><tr data-v-954d5869><td data-v-954d5869><code data-v-954d5869>&lt;</code></td><td data-v-954d5869>Decrement the pointer.</td><td data-v-954d5869>--p</td></tr><tr data-v-954d5869><td data-v-954d5869><code data-v-954d5869>+</code></td><td data-v-954d5869>Increment the byte at the pointer.</td><td data-v-954d5869>++*p</td></tr><tr data-v-954d5869><td data-v-954d5869><code data-v-954d5869>-</code></td><td data-v-954d5869>Decrement the byte at the pointer.</td><td data-v-954d5869>--*p</td></tr><tr data-v-954d5869><td data-v-954d5869><code data-v-954d5869>.</code></td><td data-v-954d5869>Output the byte at the pointer.</td><td data-v-954d5869>putchar(*p)</td></tr><tr data-v-954d5869><td data-v-954d5869><code data-v-954d5869>,</code></td><td data-v-954d5869>Input a byte and store it in the byte at the pointer.</td><td data-v-954d5869>*p = getchar()</td></tr><tr data-v-954d5869><td data-v-954d5869><code data-v-954d5869>[</code></td><td data-v-954d5869>Jump forward past the matching ] if the byte at the pointer is zero.</td><td data-v-954d5869>while (*p) {</td></tr><tr data-v-954d5869><td data-v-954d5869><code data-v-954d5869>]</code></td><td data-v-954d5869>Jump backward to the matching [ unless the byte at the pointer is zero.</td><td data-v-954d5869>}</td></tr></tbody></table><div class="info custom-block" data-v-954d5869><p class="custom-block-title" data-v-954d5869>INFO</p><p data-v-954d5869><code data-v-954d5869>p</code> has been previously defined as a <code data-v-954d5869>char*</code> in c equivalent.</p></div><h2 id="making-interpreter" tabindex="-1" data-v-954d5869>Making Interpreter <a class="header-anchor" href="#making-interpreter" aria-label="Permalink to &quot;Making Interpreter&quot;" data-v-954d5869>‚Äã</a></h2><p data-v-954d5869>Now let&#39;s make the actual interpreter in <code data-v-954d5869>danfe</code>:</p><div class="language-danfe vp-adaptive-theme line-numbers-mode" data-v-954d5869><button title="Copy Code" class="copy" data-v-954d5869></button><span class="lang" data-v-954d5869>danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-954d5869><code data-v-954d5869><span class="line" data-v-954d5869><span style="color:#FF9492;" data-v-954d5869>if</span><span style="color:#FF9492;" data-v-954d5869> len</span><span style="color:#F0F3F6;" data-v-954d5869>(__args__) </span><span style="color:#FF9492;" data-v-954d5869>&lt;</span><span style="color:#FFB1AF;font-style:italic;" data-v-954d5869> 2</span><span style="color:#F0F3F6;" data-v-954d5869> {</span></span>
<span class="line" data-v-954d5869><span style="color:#DBB7FF;" data-v-954d5869>   panic</span><span style="color:#F0F3F6;" data-v-954d5869>(</span><span style="color:#ADDCFF;" data-v-954d5869>&quot;Path to the bf code file is needed!&quot;</span><span style="color:#F0F3F6;" data-v-954d5869>)</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>}</span></span>
<span class="line" data-v-954d5869></span>
<span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>key</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#F0F3F6;" data-v-954d5869> __args__ </span><span style="color:#FF9492;" data-v-954d5869>&gt;&gt;</span></span>
<span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>key</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#F0F3F6;" data-v-954d5869> key[</span><span style="color:#91CBFF;" data-v-954d5869>0</span><span style="color:#F0F3F6;" data-v-954d5869>]</span></span>
<span class="line" data-v-954d5869></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true" data-v-954d5869><span class="line-number" data-v-954d5869>1</span><br data-v-954d5869><span class="line-number" data-v-954d5869>2</span><br data-v-954d5869><span class="line-number" data-v-954d5869>3</span><br data-v-954d5869><span class="line-number" data-v-954d5869>4</span><br data-v-954d5869><span class="line-number" data-v-954d5869>5</span><br data-v-954d5869><span class="line-number" data-v-954d5869>6</span><br data-v-954d5869><span class="line-number" data-v-954d5869>7</span><br data-v-954d5869></div></div><p data-v-954d5869><strong data-v-954d5869>Breakdown:</strong></p><ol data-v-954d5869><li data-v-954d5869><code data-v-954d5869>__args__</code> provides the arguments passed by user while running the program.</li><li data-v-954d5869>We check the length of the <code data-v-954d5869>__args__</code> and if it is less than 2 meaning we don&#39;t have an input <code data-v-954d5869>.bf</code> file we <code data-v-954d5869>panic</code> and stop the program.</li><li data-v-954d5869><code data-v-954d5869>__agrs__ &gt;&gt;</code> pops the last value from <code data-v-954d5869>__args__</code> and puts the value in key</li><li data-v-954d5869><code data-v-954d5869>key[0]</code> takes the key value from the table and puts it again in key</li></ol><p data-v-954d5869>Now let&#39;s read contents of the file defined in the identifier <code data-v-954d5869>key</code>:</p><div class="language-danfe vp-adaptive-theme line-numbers-mode" data-v-954d5869><button title="Copy Code" class="copy" data-v-954d5869></button><span class="lang" data-v-954d5869>danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-954d5869><code data-v-954d5869><span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>code</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#FF9492;" data-v-954d5869> v</span><span style="color:#F0F3F6;" data-v-954d5869> {</span></span>
<span class="line" data-v-954d5869><span style="color:#FF9492;" data-v-954d5869>       import</span><span style="color:#F0F3F6;" data-v-954d5869> os</span></span>
<span class="line" data-v-954d5869><span style="color:#FF9492;" data-v-954d5869>       return</span><span style="color:#F0F3F6;" data-v-954d5869>(os.</span><span style="color:#DBB7FF;" data-v-954d5869>read_file</span><span style="color:#F0F3F6;" data-v-954d5869>(</span><span style="color:#ADDCFF;" data-v-954d5869>&quot;</span><span style="color:#FF9492;" data-v-954d5869>%i{</span><span style="color:#ADDCFF;" data-v-954d5869>key</span><span style="color:#FF9492;" data-v-954d5869>}</span><span style="color:#ADDCFF;" data-v-954d5869>&quot;</span><span style="color:#F0F3F6;" data-v-954d5869>)</span><span style="color:#FF9492;" data-v-954d5869>!</span><span style="color:#F0F3F6;" data-v-954d5869>)</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>} </span><span style="color:#FF9492;" data-v-954d5869>endv</span></span>
<span class="line" data-v-954d5869></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true" data-v-954d5869><span class="line-number" data-v-954d5869>8</span><br data-v-954d5869><span class="line-number" data-v-954d5869>9</span><br data-v-954d5869><span class="line-number" data-v-954d5869>10</span><br data-v-954d5869><span class="line-number" data-v-954d5869>11</span><br data-v-954d5869><span class="line-number" data-v-954d5869>12</span><br data-v-954d5869></div></div><p data-v-954d5869><strong data-v-954d5869>Breakdown:</strong></p><ol data-v-954d5869><li data-v-954d5869>The <code data-v-954d5869>v {</code> initiates a vblock. Everything written inside it is executed through v binary.</li><li data-v-954d5869>The output of the v code is stored in the variable <code data-v-954d5869>code</code>.</li></ol><p data-v-954d5869>Now let&#39;s make the memory block of our interpreter.</p><div class="language-danfe vp-adaptive-theme line-numbers-mode" data-v-954d5869><button title="Copy Code" class="copy" data-v-954d5869></button><span class="lang" data-v-954d5869>danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-954d5869><code data-v-954d5869><span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>memory</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#F0F3F6;" data-v-954d5869> []</span></span>
<span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>pointer</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#91CBFF;" data-v-954d5869> 0</span></span>
<span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>code_ptr</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#91CBFF;" data-v-954d5869> 0</span></span>
<span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>loop_stack</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#F0F3F6;" data-v-954d5869> []</span></span>
<span class="line" data-v-954d5869></span>
<span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>x</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#91CBFF;" data-v-954d5869> 0</span></span>
<span class="line" data-v-954d5869></span>
<span class="line" data-v-954d5869><span style="color:#BDC4CC;" data-v-954d5869># create memory block</span></span>
<span class="line" data-v-954d5869><span style="color:#FF9492;" data-v-954d5869>for</span><span style="color:#F0F3F6;" data-v-954d5869> x </span><span style="color:#FF9492;" data-v-954d5869>&lt;</span><span style="color:#FFB1AF;font-style:italic;" data-v-954d5869> 3000</span><span style="color:#F0F3F6;" data-v-954d5869> {</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>   memory </span><span style="color:#FF9492;" data-v-954d5869>&lt;&lt;</span><span style="color:#91CBFF;" data-v-954d5869> 0</span></span>
<span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>   x</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#F0F3F6;" data-v-954d5869> x </span><span style="color:#FF9492;" data-v-954d5869>+</span><span style="color:#91CBFF;" data-v-954d5869> 1</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>}</span></span>
<span class="line" data-v-954d5869></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true" data-v-954d5869><span class="line-number" data-v-954d5869>13</span><br data-v-954d5869><span class="line-number" data-v-954d5869>14</span><br data-v-954d5869><span class="line-number" data-v-954d5869>15</span><br data-v-954d5869><span class="line-number" data-v-954d5869>16</span><br data-v-954d5869><span class="line-number" data-v-954d5869>17</span><br data-v-954d5869><span class="line-number" data-v-954d5869>18</span><br data-v-954d5869><span class="line-number" data-v-954d5869>19</span><br data-v-954d5869><span class="line-number" data-v-954d5869>20</span><br data-v-954d5869><span class="line-number" data-v-954d5869>21</span><br data-v-954d5869><span class="line-number" data-v-954d5869>22</span><br data-v-954d5869><span class="line-number" data-v-954d5869>23</span><br data-v-954d5869><span class="line-number" data-v-954d5869>24</span><br data-v-954d5869><span class="line-number" data-v-954d5869>25</span><br data-v-954d5869></div></div><p data-v-954d5869><strong data-v-954d5869>Breakdown:</strong></p><ol data-v-954d5869><li data-v-954d5869>Initialize all the arrays needed, and fill in the memory array with <code data-v-954d5869>3000</code> <code data-v-954d5869>zeros</code>.</li></ol><p data-v-954d5869>Now the block which does the actual interpretation.</p><div class="language-danfe vp-adaptive-theme line-numbers-mode" data-v-954d5869><button title="Copy Code" class="copy" data-v-954d5869></button><span class="lang" data-v-954d5869>danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-954d5869><code data-v-954d5869><span class="line" data-v-954d5869><span style="color:#FF9492;" data-v-954d5869>for</span><span style="color:#F0F3F6;" data-v-954d5869> code_ptr </span><span style="color:#FF9492;" data-v-954d5869>&lt;</span><span style="color:#FF9492;" data-v-954d5869> len</span><span style="color:#F0F3F6;" data-v-954d5869>(code) {</span></span>
<span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>   command</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#F0F3F6;" data-v-954d5869> code[code_ptr]</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>  </span></span>
<span class="line" data-v-954d5869><span style="color:#FF9492;" data-v-954d5869>   if</span><span style="color:#F0F3F6;" data-v-954d5869> command </span><span style="color:#FF9492;" data-v-954d5869>==</span><span style="color:#ADDCFF;" data-v-954d5869> &quot;&gt;&quot;</span><span style="color:#F0F3F6;" data-v-954d5869> {</span></span>
<span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>       pointer</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#F0F3F6;" data-v-954d5869> pointer </span><span style="color:#FF9492;" data-v-954d5869>+</span><span style="color:#91CBFF;" data-v-954d5869> 1</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>   }</span><span style="color:#FF9492;" data-v-954d5869>else</span><span style="color:#FF9492;" data-v-954d5869> if</span><span style="color:#F0F3F6;" data-v-954d5869> command </span><span style="color:#FF9492;" data-v-954d5869>==</span><span style="color:#ADDCFF;" data-v-954d5869> &quot;&lt;&quot;</span><span style="color:#F0F3F6;" data-v-954d5869> {</span></span>
<span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>       pointer</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#F0F3F6;" data-v-954d5869> pointer </span><span style="color:#FF9492;" data-v-954d5869>-</span><span style="color:#91CBFF;" data-v-954d5869> 1</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>   }</span><span style="color:#FF9492;" data-v-954d5869>else</span><span style="color:#FF9492;" data-v-954d5869> if</span><span style="color:#F0F3F6;" data-v-954d5869> command </span><span style="color:#FF9492;" data-v-954d5869>==</span><span style="color:#ADDCFF;" data-v-954d5869> &quot;+&quot;</span><span style="color:#F0F3F6;" data-v-954d5869> {</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>       memory[pointer] </span><span style="color:#FF9492;" data-v-954d5869>=</span><span style="color:#F0F3F6;" data-v-954d5869> (memory[pointer] </span><span style="color:#FF9492;" data-v-954d5869>+</span><span style="color:#91CBFF;" data-v-954d5869> 1</span><span style="color:#F0F3F6;" data-v-954d5869>) </span><span style="color:#FF9492;" data-v-954d5869>%</span><span style="color:#91CBFF;" data-v-954d5869> 256</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>   }</span><span style="color:#FF9492;" data-v-954d5869>else</span><span style="color:#FF9492;" data-v-954d5869> if</span><span style="color:#F0F3F6;" data-v-954d5869> command </span><span style="color:#FF9492;" data-v-954d5869>==</span><span style="color:#ADDCFF;" data-v-954d5869> &quot;-&quot;</span><span style="color:#F0F3F6;" data-v-954d5869> {</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>       memory[pointer] </span><span style="color:#FF9492;" data-v-954d5869>=</span><span style="color:#F0F3F6;" data-v-954d5869> (memory[pointer] </span><span style="color:#FF9492;" data-v-954d5869>-</span><span style="color:#91CBFF;" data-v-954d5869> 1</span><span style="color:#F0F3F6;" data-v-954d5869>) </span><span style="color:#FF9492;" data-v-954d5869>%</span><span style="color:#91CBFF;" data-v-954d5869> 256</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>   }</span><span style="color:#FF9492;" data-v-954d5869>else</span><span style="color:#FF9492;" data-v-954d5869> if</span><span style="color:#F0F3F6;" data-v-954d5869> command </span><span style="color:#FF9492;" data-v-954d5869>==</span><span style="color:#ADDCFF;" data-v-954d5869> &quot;.&quot;</span><span style="color:#F0F3F6;" data-v-954d5869> {</span></span>
<span class="line" data-v-954d5869><span style="color:#DBB7FF;" data-v-954d5869>       print</span><span style="color:#F0F3F6;" data-v-954d5869>(</span><span style="color:#DBB7FF;" data-v-954d5869>chr</span><span style="color:#F0F3F6;" data-v-954d5869>(memory[pointer]))</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>   }</span><span style="color:#FF9492;" data-v-954d5869>else</span><span style="color:#FF9492;" data-v-954d5869> if</span><span style="color:#F0F3F6;" data-v-954d5869> command </span><span style="color:#FF9492;" data-v-954d5869>==</span><span style="color:#ADDCFF;" data-v-954d5869> &quot;,&quot;</span><span style="color:#F0F3F6;" data-v-954d5869>{</span></span>
<span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>       got_input</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#FF9492;" data-v-954d5869> input</span><span style="color:#F0F3F6;" data-v-954d5869>(</span><span style="color:#ADDCFF;" data-v-954d5869>&quot;&quot;</span><span style="color:#F0F3F6;" data-v-954d5869>)</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>       memory[pointer] </span><span style="color:#FF9492;" data-v-954d5869>=</span><span style="color:#DBB7FF;" data-v-954d5869> chr</span><span style="color:#F0F3F6;" data-v-954d5869>(got_input[</span><span style="color:#91CBFF;" data-v-954d5869>0</span><span style="color:#F0F3F6;" data-v-954d5869>])</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>   }</span><span style="color:#FF9492;" data-v-954d5869>else</span><span style="color:#FF9492;" data-v-954d5869> if</span><span style="color:#F0F3F6;" data-v-954d5869> command </span><span style="color:#FF9492;" data-v-954d5869>==</span><span style="color:#ADDCFF;" data-v-954d5869> &#39;[&#39;</span><span style="color:#F0F3F6;" data-v-954d5869> {</span></span>
<span class="line" data-v-954d5869><span style="color:#FF9492;" data-v-954d5869>       if</span><span style="color:#F0F3F6;" data-v-954d5869> memory[pointer] </span><span style="color:#FF9492;" data-v-954d5869>==</span><span style="color:#FFB1AF;font-style:italic;" data-v-954d5869> 0</span><span style="color:#F0F3F6;" data-v-954d5869> {</span></span>
<span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>           open_brackets</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#91CBFF;" data-v-954d5869> 1</span></span>
<span class="line" data-v-954d5869><span style="color:#FF9492;" data-v-954d5869>           for</span><span style="color:#DBB7FF;" data-v-954d5869> open_brackets</span><span style="color:#F0F3F6;" data-v-954d5869> {</span></span>
<span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>               code_ptr</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#F0F3F6;" data-v-954d5869> code_ptr </span><span style="color:#FF9492;" data-v-954d5869>+</span><span style="color:#91CBFF;" data-v-954d5869> 1</span></span>
<span class="line" data-v-954d5869></span>
<span class="line" data-v-954d5869><span style="color:#FF9492;" data-v-954d5869>               if</span><span style="color:#F0F3F6;" data-v-954d5869> code[code_ptr] </span><span style="color:#FF9492;" data-v-954d5869>==</span><span style="color:#ADDCFF;" data-v-954d5869> &#39;[&#39;</span><span style="color:#F0F3F6;" data-v-954d5869> {</span></span>
<span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>                   open_brackets</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#F0F3F6;" data-v-954d5869> open_brackets </span><span style="color:#FF9492;" data-v-954d5869>+</span><span style="color:#91CBFF;" data-v-954d5869> 1</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>               } </span><span style="color:#FF9492;" data-v-954d5869>else</span><span style="color:#FF9492;" data-v-954d5869> if</span><span style="color:#F0F3F6;" data-v-954d5869> code[code_ptr] </span><span style="color:#FF9492;" data-v-954d5869>==</span><span style="color:#ADDCFF;" data-v-954d5869> &#39;]&#39;</span><span style="color:#F0F3F6;" data-v-954d5869> {</span></span>
<span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>                   open_brackets</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#F0F3F6;" data-v-954d5869> open_brackets </span><span style="color:#FF9492;" data-v-954d5869>-</span><span style="color:#91CBFF;" data-v-954d5869> 1</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>               }</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>           }</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>       } </span><span style="color:#FF9492;" data-v-954d5869>else</span><span style="color:#F0F3F6;" data-v-954d5869> {</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>           loop_stack </span><span style="color:#FF9492;" data-v-954d5869>&lt;&lt;</span><span style="color:#F0F3F6;" data-v-954d5869> code_ptr</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>       }</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>   } </span><span style="color:#FF9492;" data-v-954d5869>else</span><span style="color:#FF9492;" data-v-954d5869> if</span><span style="color:#F0F3F6;" data-v-954d5869> command </span><span style="color:#FF9492;" data-v-954d5869>==</span><span style="color:#ADDCFF;" data-v-954d5869> &#39;]&#39;</span><span style="color:#F0F3F6;" data-v-954d5869> {</span></span>
<span class="line" data-v-954d5869><span style="color:#FF9492;" data-v-954d5869>       if</span><span style="color:#F0F3F6;" data-v-954d5869> memory[pointer] </span><span style="color:#FF9492;" data-v-954d5869>!=</span><span style="color:#FFB1AF;font-style:italic;" data-v-954d5869> 0</span><span style="color:#F0F3F6;" data-v-954d5869> {</span></span>
<span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>           code_ptr</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#F0F3F6;" data-v-954d5869> loop_stack[</span><span style="color:#FF9492;" data-v-954d5869>len</span><span style="color:#F0F3F6;" data-v-954d5869>(loop_stack) </span><span style="color:#FF9492;" data-v-954d5869>-</span><span style="color:#91CBFF;" data-v-954d5869> 1</span><span style="color:#F0F3F6;" data-v-954d5869>]</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>       } </span><span style="color:#FF9492;" data-v-954d5869>else</span><span style="color:#F0F3F6;" data-v-954d5869> {</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>           loop_stack </span><span style="color:#FF9492;" data-v-954d5869>&gt;&gt;</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>       }</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>   }</span></span>
<span class="line" data-v-954d5869></span>
<span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>   code_ptr</span><span style="color:#FF9492;" data-v-954d5869> =</span><span style="color:#F0F3F6;" data-v-954d5869> code_ptr </span><span style="color:#FF9492;" data-v-954d5869>+</span><span style="color:#91CBFF;" data-v-954d5869> 1</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>}</span></span>
<span class="line" data-v-954d5869></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true" data-v-954d5869><span class="line-number" data-v-954d5869>26</span><br data-v-954d5869><span class="line-number" data-v-954d5869>27</span><br data-v-954d5869><span class="line-number" data-v-954d5869>28</span><br data-v-954d5869><span class="line-number" data-v-954d5869>29</span><br data-v-954d5869><span class="line-number" data-v-954d5869>30</span><br data-v-954d5869><span class="line-number" data-v-954d5869>31</span><br data-v-954d5869><span class="line-number" data-v-954d5869>32</span><br data-v-954d5869><span class="line-number" data-v-954d5869>33</span><br data-v-954d5869><span class="line-number" data-v-954d5869>34</span><br data-v-954d5869><span class="line-number" data-v-954d5869>35</span><br data-v-954d5869><span class="line-number" data-v-954d5869>36</span><br data-v-954d5869><span class="line-number" data-v-954d5869>37</span><br data-v-954d5869><span class="line-number" data-v-954d5869>38</span><br data-v-954d5869><span class="line-number" data-v-954d5869>39</span><br data-v-954d5869><span class="line-number" data-v-954d5869>40</span><br data-v-954d5869><span class="line-number" data-v-954d5869>41</span><br data-v-954d5869><span class="line-number" data-v-954d5869>42</span><br data-v-954d5869><span class="line-number" data-v-954d5869>43</span><br data-v-954d5869><span class="line-number" data-v-954d5869>44</span><br data-v-954d5869><span class="line-number" data-v-954d5869>45</span><br data-v-954d5869><span class="line-number" data-v-954d5869>46</span><br data-v-954d5869><span class="line-number" data-v-954d5869>47</span><br data-v-954d5869><span class="line-number" data-v-954d5869>48</span><br data-v-954d5869><span class="line-number" data-v-954d5869>49</span><br data-v-954d5869><span class="line-number" data-v-954d5869>50</span><br data-v-954d5869><span class="line-number" data-v-954d5869>51</span><br data-v-954d5869><span class="line-number" data-v-954d5869>52</span><br data-v-954d5869><span class="line-number" data-v-954d5869>53</span><br data-v-954d5869><span class="line-number" data-v-954d5869>54</span><br data-v-954d5869><span class="line-number" data-v-954d5869>55</span><br data-v-954d5869><span class="line-number" data-v-954d5869>56</span><br data-v-954d5869><span class="line-number" data-v-954d5869>57</span><br data-v-954d5869><span class="line-number" data-v-954d5869>58</span><br data-v-954d5869><span class="line-number" data-v-954d5869>59</span><br data-v-954d5869><span class="line-number" data-v-954d5869>60</span><br data-v-954d5869><span class="line-number" data-v-954d5869>61</span><br data-v-954d5869><span class="line-number" data-v-954d5869>62</span><br data-v-954d5869><span class="line-number" data-v-954d5869>63</span><br data-v-954d5869><span class="line-number" data-v-954d5869>64</span><br data-v-954d5869><span class="line-number" data-v-954d5869>65</span><br data-v-954d5869><span class="line-number" data-v-954d5869>66</span><br data-v-954d5869><span class="line-number" data-v-954d5869>67</span><br data-v-954d5869></div></div><p data-v-954d5869><strong data-v-954d5869>Breakdown:</strong></p><ol data-v-954d5869><li data-v-954d5869>The current code in pointer is stored in the variable <code data-v-954d5869>command</code>.</li><li data-v-954d5869>All of the other operations done in the if else sections are done as it is defined in the <a href="./#explaining-characters" data-v-954d5869>Explaining Characters</a></li></ol><p data-v-954d5869>Let&#39;s test the interpreter, by writing a &quot;simple&quot; brainfuck program:</p><div class="language-md vp-adaptive-theme" data-v-954d5869><button title="Copy Code" class="copy" data-v-954d5869></button><span class="lang" data-v-954d5869>md</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-954d5869><code data-v-954d5869><span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>++++++++++[</span><span style="color:#ADDCFF;" data-v-954d5869>&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-</span><span style="color:#F0F3F6;" data-v-954d5869>]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.</span></span>
<span class="line" data-v-954d5869></span></code></pre></div><p data-v-954d5869>The code above is to print <code data-v-954d5869>Hello World!</code></p><p data-v-954d5869>If we run the interpreter by saving the bf program in helloworld.bf.</p><div class="language-sh vp-adaptive-theme" data-v-954d5869><button title="Copy Code" class="copy" data-v-954d5869></button><span class="lang" data-v-954d5869>sh</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-954d5869><code data-v-954d5869><span class="line" data-v-954d5869><span style="color:#FFB757;" data-v-954d5869>danfe</span><span style="color:#ADDCFF;" data-v-954d5869> run</span><span style="color:#ADDCFF;" data-v-954d5869> main.df</span><span style="color:#ADDCFF;" data-v-954d5869> ./helloworld.bf</span></span>
<span class="line" data-v-954d5869></span></code></pre></div><div class="language-md vp-adaptive-theme" data-v-954d5869><button title="Copy Code" class="copy" data-v-954d5869></button><span class="lang" data-v-954d5869>md</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-954d5869><code data-v-954d5869><span class="line" data-v-954d5869><span style="color:#91CBFF;font-weight:bold;" data-v-954d5869># Output</span></span>
<span class="line" data-v-954d5869><span style="color:#F0F3F6;" data-v-954d5869>Hello World!</span></span>
<span class="line" data-v-954d5869></span></code></pre></div><p data-v-954d5869>The full code is provided in this github repo: <a href="https://github.com/danfe-df/danfe-v-brainfuk" target="_blank" rel="noreferrer" data-v-954d5869>Link</a></p><h2 id="main-takeaway" tabindex="-1" data-v-954d5869>Main Takeaway <a class="header-anchor" href="#main-takeaway" aria-label="Permalink to &quot;Main Takeaway&quot;" data-v-954d5869>‚Äã</a></h2><p data-v-954d5869>Writing an interpreter for brainfuck is <code data-v-954d5869>easier</code> than writing an actual brainfuck hello world program. Even tho, I created the whole interpreter I still can&#39;t write a bf program properly. It just shows how incredibly and masterfully the brainfuck esolang was created.</p><img src="`+e+'" style="height:170px;position:absolute;right:0;" data-v-954d5869>',33)]))}const b=s(l,[["render",p],["__scopeId","data-v-954d5869"]]);export{y as __pageData,b as default};
