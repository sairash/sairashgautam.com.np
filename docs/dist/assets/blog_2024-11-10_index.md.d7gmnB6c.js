import{_ as s,c as t,a1 as n,o as e}from"./chunks/framework.GKu-Ijuu.js";const l="/mascot/woe-is-me.png",i=JSON.parse('{"title":"Writing a .bf interpreter","description":"","frontmatter":{"title":"Writing a .bf interpreter","date":"2024-11-10T00:00:00.000Z"},"headers":[],"relativePath":"blog/2024-11-10/index.md","filePath":"blog/2024-11-10/index.md"}'),p={name:"blog/2024-11-10/index.md"};function o(d,a,b,r,c,v){return e(),t("div",null,a[0]||(a[0]=[n(`<h1 id="writing-a-bf-interpreter" tabindex="-1" data-v-23b94800>Writing a .bf interpreter <a class="header-anchor" href="#writing-a-bf-interpreter" aria-label="Permalink to &quot;Writing a .bf interpreter&quot;" data-v-23b94800>‚Äã</a></h1><p data-v-23b94800><a href="/blog" data-v-23b94800>&lt;- Back to blogs</a></p><p data-v-23b94800>Curious about what ‚Äú.bf‚Äù is? Don‚Äôt worry‚Äîyou‚Äôre not alone! The ‚Äú.bf‚Äù extension belongs to <code data-v-23b94800>Brainfuck</code>, an &quot;esoteric language&quot; or esolang. Unlike conventional programming languages, esolangs are designed to push the boundaries of how we think about programming. Brainfuck, invented by Urban M√ºller in <code data-v-23b94800>1993</code>, is a classic in this genre. M√ºller created it with the ambitious goal of making a language for which he could write the smallest possible compiler‚Äîa feat he achieved with a compiler just 240 bytes in size ü§Ø.</p><p data-v-23b94800>I‚Äôve always been fascinated by the quirks of esoteric languages, so I decided to dive into Brainfuck by creating my own interpreter for it. And, just to add a personal twist, I built the interpreter in a language I developed myself, called Danfe! Brainfuck, despite its intimidating name, only uses eight characters: <code data-v-23b94800>&gt;</code>, <code data-v-23b94800>&lt;</code>, <code data-v-23b94800>+</code>, <code data-v-23b94800>-</code>, <code data-v-23b94800>.</code>, <code data-v-23b94800>,</code>, <code data-v-23b94800>[</code>, and <code data-v-23b94800>]</code>. Each character has a unique function, and together, they create a surprisingly powerful (and challenging!) language. Let‚Äôs break down what each symbol does and explore how they fit together in this mind-bending language.</p><h2 id="explaining-characters" tabindex="-1" data-v-23b94800>Explaining Characters <a class="header-anchor" href="#explaining-characters" aria-label="Permalink to &quot;Explaining Characters&quot;" data-v-23b94800>‚Äã</a></h2><table tabindex="0" data-v-23b94800><thead data-v-23b94800><tr data-v-23b94800><th data-v-23b94800>Keyword</th><th data-v-23b94800>Info</th><th data-v-23b94800>C equivalent</th></tr></thead><tbody data-v-23b94800><tr data-v-23b94800><td data-v-23b94800><code data-v-23b94800>&gt;</code></td><td data-v-23b94800>Increment the pointer.</td><td data-v-23b94800>++p</td></tr><tr data-v-23b94800><td data-v-23b94800><code data-v-23b94800>&lt;</code></td><td data-v-23b94800>Decrement the pointer.</td><td data-v-23b94800>--p</td></tr><tr data-v-23b94800><td data-v-23b94800><code data-v-23b94800>+</code></td><td data-v-23b94800>Increment the byte at the pointer.</td><td data-v-23b94800>++*p</td></tr><tr data-v-23b94800><td data-v-23b94800><code data-v-23b94800>-</code></td><td data-v-23b94800>Decrement the byte at the pointer.</td><td data-v-23b94800>--*p</td></tr><tr data-v-23b94800><td data-v-23b94800><code data-v-23b94800>.</code></td><td data-v-23b94800>Output the byte at the pointer.</td><td data-v-23b94800>putchar(*p)</td></tr><tr data-v-23b94800><td data-v-23b94800><code data-v-23b94800>,</code></td><td data-v-23b94800>Input a byte and store it in the byte at the pointer.</td><td data-v-23b94800>*p = getchar()</td></tr><tr data-v-23b94800><td data-v-23b94800><code data-v-23b94800>[</code></td><td data-v-23b94800>Jump forward past the matching ] if the byte at the pointer is zero.</td><td data-v-23b94800>while (*p) {</td></tr><tr data-v-23b94800><td data-v-23b94800><code data-v-23b94800>]</code></td><td data-v-23b94800>Jump backward to the matching [ unless the byte at the pointer is zero.</td><td data-v-23b94800>}</td></tr></tbody></table><div class="info custom-block" data-v-23b94800><p class="custom-block-title" data-v-23b94800>INFO</p><p data-v-23b94800><code data-v-23b94800>p</code> has been previously defined as a <code data-v-23b94800>char*</code> in c equivalent.</p></div><h2 id="making-interpreter" tabindex="-1" data-v-23b94800>Making Interpreter <a class="header-anchor" href="#making-interpreter" aria-label="Permalink to &quot;Making Interpreter&quot;" data-v-23b94800>‚Äã</a></h2><p data-v-23b94800>Now let&#39;s make the actual interpreter in <code data-v-23b94800>danfe</code>:</p><div class="language-danfe vp-adaptive-theme line-numbers-mode" data-v-23b94800><button title="Copy Code" class="copy" data-v-23b94800></button><span class="lang" data-v-23b94800>danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-23b94800><code data-v-23b94800><span class="line" data-v-23b94800><span style="color:#FF9492;" data-v-23b94800>if</span><span style="color:#FF9492;" data-v-23b94800> len</span><span style="color:#F0F3F6;" data-v-23b94800>(__args__) </span><span style="color:#FF9492;" data-v-23b94800>&lt;</span><span style="color:#FFB1AF;font-style:italic;" data-v-23b94800> 2</span><span style="color:#F0F3F6;" data-v-23b94800> {</span></span>
<span class="line" data-v-23b94800><span style="color:#DBB7FF;" data-v-23b94800>   panic</span><span style="color:#F0F3F6;" data-v-23b94800>(</span><span style="color:#ADDCFF;" data-v-23b94800>&quot;Path to the bf code file is needed!&quot;</span><span style="color:#F0F3F6;" data-v-23b94800>)</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>}</span></span>
<span class="line" data-v-23b94800></span>
<span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>key</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#F0F3F6;" data-v-23b94800> __args__ </span><span style="color:#FF9492;" data-v-23b94800>&gt;&gt;</span></span>
<span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>key</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#F0F3F6;" data-v-23b94800> key[</span><span style="color:#91CBFF;" data-v-23b94800>0</span><span style="color:#F0F3F6;" data-v-23b94800>]</span></span>
<span class="line" data-v-23b94800></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true" data-v-23b94800><span class="line-number" data-v-23b94800>1</span><br data-v-23b94800><span class="line-number" data-v-23b94800>2</span><br data-v-23b94800><span class="line-number" data-v-23b94800>3</span><br data-v-23b94800><span class="line-number" data-v-23b94800>4</span><br data-v-23b94800><span class="line-number" data-v-23b94800>5</span><br data-v-23b94800><span class="line-number" data-v-23b94800>6</span><br data-v-23b94800><span class="line-number" data-v-23b94800>7</span><br data-v-23b94800></div></div><p data-v-23b94800><strong data-v-23b94800>Breakdown:</strong></p><ol data-v-23b94800><li data-v-23b94800><code data-v-23b94800>__args__</code> provides the arguments passed by user while running the program.</li><li data-v-23b94800>We check the length of the <code data-v-23b94800>__args__</code> and if it is less than 2 meaning we don&#39;t have an input <code data-v-23b94800>.bf</code> file we <code data-v-23b94800>panic</code> and stop the program.</li><li data-v-23b94800><code data-v-23b94800>__agrs__ &gt;&gt;</code> pops the last value from <code data-v-23b94800>__args__</code> and puts the value in key</li><li data-v-23b94800><code data-v-23b94800>key[0]</code> takes the key value from the table and puts it again in key</li></ol><p data-v-23b94800>Now let&#39;s read contents of the file defined in the identifier <code data-v-23b94800>key</code>:</p><div class="language-danfe vp-adaptive-theme line-numbers-mode" data-v-23b94800><button title="Copy Code" class="copy" data-v-23b94800></button><span class="lang" data-v-23b94800>danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-23b94800><code data-v-23b94800><span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>code</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#FF9492;" data-v-23b94800> v</span><span style="color:#F0F3F6;" data-v-23b94800> {</span></span>
<span class="line" data-v-23b94800><span style="color:#FF9492;" data-v-23b94800>       import</span><span style="color:#F0F3F6;" data-v-23b94800> os</span></span>
<span class="line" data-v-23b94800><span style="color:#FF9492;" data-v-23b94800>       return</span><span style="color:#F0F3F6;" data-v-23b94800>(os.</span><span style="color:#DBB7FF;" data-v-23b94800>read_file</span><span style="color:#F0F3F6;" data-v-23b94800>(</span><span style="color:#ADDCFF;" data-v-23b94800>&quot;</span><span style="color:#FF9492;" data-v-23b94800>%i{</span><span style="color:#ADDCFF;" data-v-23b94800>key</span><span style="color:#FF9492;" data-v-23b94800>}</span><span style="color:#ADDCFF;" data-v-23b94800>&quot;</span><span style="color:#F0F3F6;" data-v-23b94800>)</span><span style="color:#FF9492;" data-v-23b94800>!</span><span style="color:#F0F3F6;" data-v-23b94800>)</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>} </span><span style="color:#FF9492;" data-v-23b94800>endv</span></span>
<span class="line" data-v-23b94800></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true" data-v-23b94800><span class="line-number" data-v-23b94800>8</span><br data-v-23b94800><span class="line-number" data-v-23b94800>9</span><br data-v-23b94800><span class="line-number" data-v-23b94800>10</span><br data-v-23b94800><span class="line-number" data-v-23b94800>11</span><br data-v-23b94800><span class="line-number" data-v-23b94800>12</span><br data-v-23b94800></div></div><p data-v-23b94800><strong data-v-23b94800>Breakdown:</strong></p><ol data-v-23b94800><li data-v-23b94800>The <code data-v-23b94800>v {</code> initiates a vblock. Everything written inside it is executed through v binary.</li><li data-v-23b94800>The output of the v code is stored in the variable <code data-v-23b94800>code</code>.</li></ol><p data-v-23b94800>Now let&#39;s make the memory block of our interpreter.</p><div class="language-danfe vp-adaptive-theme line-numbers-mode" data-v-23b94800><button title="Copy Code" class="copy" data-v-23b94800></button><span class="lang" data-v-23b94800>danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-23b94800><code data-v-23b94800><span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>memory</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#F0F3F6;" data-v-23b94800> []</span></span>
<span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>pointer</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#91CBFF;" data-v-23b94800> 0</span></span>
<span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>code_ptr</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#91CBFF;" data-v-23b94800> 0</span></span>
<span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>loop_stack</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#F0F3F6;" data-v-23b94800> []</span></span>
<span class="line" data-v-23b94800></span>
<span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>x</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#91CBFF;" data-v-23b94800> 0</span></span>
<span class="line" data-v-23b94800></span>
<span class="line" data-v-23b94800><span style="color:#BDC4CC;" data-v-23b94800># create memory block</span></span>
<span class="line" data-v-23b94800><span style="color:#FF9492;" data-v-23b94800>for</span><span style="color:#F0F3F6;" data-v-23b94800> x </span><span style="color:#FF9492;" data-v-23b94800>&lt;</span><span style="color:#FFB1AF;font-style:italic;" data-v-23b94800> 3000</span><span style="color:#F0F3F6;" data-v-23b94800> {</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>   memory </span><span style="color:#FF9492;" data-v-23b94800>&lt;&lt;</span><span style="color:#91CBFF;" data-v-23b94800> 0</span></span>
<span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>   x</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#F0F3F6;" data-v-23b94800> x </span><span style="color:#FF9492;" data-v-23b94800>+</span><span style="color:#91CBFF;" data-v-23b94800> 1</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>}</span></span>
<span class="line" data-v-23b94800></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true" data-v-23b94800><span class="line-number" data-v-23b94800>13</span><br data-v-23b94800><span class="line-number" data-v-23b94800>14</span><br data-v-23b94800><span class="line-number" data-v-23b94800>15</span><br data-v-23b94800><span class="line-number" data-v-23b94800>16</span><br data-v-23b94800><span class="line-number" data-v-23b94800>17</span><br data-v-23b94800><span class="line-number" data-v-23b94800>18</span><br data-v-23b94800><span class="line-number" data-v-23b94800>19</span><br data-v-23b94800><span class="line-number" data-v-23b94800>20</span><br data-v-23b94800><span class="line-number" data-v-23b94800>21</span><br data-v-23b94800><span class="line-number" data-v-23b94800>22</span><br data-v-23b94800><span class="line-number" data-v-23b94800>23</span><br data-v-23b94800><span class="line-number" data-v-23b94800>24</span><br data-v-23b94800><span class="line-number" data-v-23b94800>25</span><br data-v-23b94800></div></div><p data-v-23b94800><strong data-v-23b94800>Breakdown:</strong></p><ol data-v-23b94800><li data-v-23b94800>Initialize all the arrays needed, and fill in the memory array with <code data-v-23b94800>3000</code> <code data-v-23b94800>zeros</code>.</li></ol><p data-v-23b94800>Now the block which does the actual interpretation.</p><div class="language-danfe vp-adaptive-theme line-numbers-mode" data-v-23b94800><button title="Copy Code" class="copy" data-v-23b94800></button><span class="lang" data-v-23b94800>danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-23b94800><code data-v-23b94800><span class="line" data-v-23b94800><span style="color:#FF9492;" data-v-23b94800>for</span><span style="color:#F0F3F6;" data-v-23b94800> code_ptr </span><span style="color:#FF9492;" data-v-23b94800>&lt;</span><span style="color:#FF9492;" data-v-23b94800> len</span><span style="color:#F0F3F6;" data-v-23b94800>(code) {</span></span>
<span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>   command</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#F0F3F6;" data-v-23b94800> code[code_ptr]</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>  </span></span>
<span class="line" data-v-23b94800><span style="color:#FF9492;" data-v-23b94800>   if</span><span style="color:#F0F3F6;" data-v-23b94800> command </span><span style="color:#FF9492;" data-v-23b94800>==</span><span style="color:#ADDCFF;" data-v-23b94800> &quot;&gt;&quot;</span><span style="color:#F0F3F6;" data-v-23b94800> {</span></span>
<span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>       pointer</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#F0F3F6;" data-v-23b94800> pointer </span><span style="color:#FF9492;" data-v-23b94800>+</span><span style="color:#91CBFF;" data-v-23b94800> 1</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>   }</span><span style="color:#FF9492;" data-v-23b94800>else</span><span style="color:#FF9492;" data-v-23b94800> if</span><span style="color:#F0F3F6;" data-v-23b94800> command </span><span style="color:#FF9492;" data-v-23b94800>==</span><span style="color:#ADDCFF;" data-v-23b94800> &quot;&lt;&quot;</span><span style="color:#F0F3F6;" data-v-23b94800> {</span></span>
<span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>       pointer</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#F0F3F6;" data-v-23b94800> pointer </span><span style="color:#FF9492;" data-v-23b94800>-</span><span style="color:#91CBFF;" data-v-23b94800> 1</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>   }</span><span style="color:#FF9492;" data-v-23b94800>else</span><span style="color:#FF9492;" data-v-23b94800> if</span><span style="color:#F0F3F6;" data-v-23b94800> command </span><span style="color:#FF9492;" data-v-23b94800>==</span><span style="color:#ADDCFF;" data-v-23b94800> &quot;+&quot;</span><span style="color:#F0F3F6;" data-v-23b94800> {</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>       memory[pointer] </span><span style="color:#FF9492;" data-v-23b94800>=</span><span style="color:#F0F3F6;" data-v-23b94800> (memory[pointer] </span><span style="color:#FF9492;" data-v-23b94800>+</span><span style="color:#91CBFF;" data-v-23b94800> 1</span><span style="color:#F0F3F6;" data-v-23b94800>) </span><span style="color:#FF9492;" data-v-23b94800>%</span><span style="color:#91CBFF;" data-v-23b94800> 256</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>   }</span><span style="color:#FF9492;" data-v-23b94800>else</span><span style="color:#FF9492;" data-v-23b94800> if</span><span style="color:#F0F3F6;" data-v-23b94800> command </span><span style="color:#FF9492;" data-v-23b94800>==</span><span style="color:#ADDCFF;" data-v-23b94800> &quot;-&quot;</span><span style="color:#F0F3F6;" data-v-23b94800> {</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>       memory[pointer] </span><span style="color:#FF9492;" data-v-23b94800>=</span><span style="color:#F0F3F6;" data-v-23b94800> (memory[pointer] </span><span style="color:#FF9492;" data-v-23b94800>-</span><span style="color:#91CBFF;" data-v-23b94800> 1</span><span style="color:#F0F3F6;" data-v-23b94800>) </span><span style="color:#FF9492;" data-v-23b94800>%</span><span style="color:#91CBFF;" data-v-23b94800> 256</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>   }</span><span style="color:#FF9492;" data-v-23b94800>else</span><span style="color:#FF9492;" data-v-23b94800> if</span><span style="color:#F0F3F6;" data-v-23b94800> command </span><span style="color:#FF9492;" data-v-23b94800>==</span><span style="color:#ADDCFF;" data-v-23b94800> &quot;.&quot;</span><span style="color:#F0F3F6;" data-v-23b94800> {</span></span>
<span class="line" data-v-23b94800><span style="color:#DBB7FF;" data-v-23b94800>       print</span><span style="color:#F0F3F6;" data-v-23b94800>(</span><span style="color:#DBB7FF;" data-v-23b94800>chr</span><span style="color:#F0F3F6;" data-v-23b94800>(memory[pointer]))</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>   }</span><span style="color:#FF9492;" data-v-23b94800>else</span><span style="color:#FF9492;" data-v-23b94800> if</span><span style="color:#F0F3F6;" data-v-23b94800> command </span><span style="color:#FF9492;" data-v-23b94800>==</span><span style="color:#ADDCFF;" data-v-23b94800> &quot;,&quot;</span><span style="color:#F0F3F6;" data-v-23b94800>{</span></span>
<span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>       got_input</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#FF9492;" data-v-23b94800> input</span><span style="color:#F0F3F6;" data-v-23b94800>(</span><span style="color:#ADDCFF;" data-v-23b94800>&quot;&quot;</span><span style="color:#F0F3F6;" data-v-23b94800>)</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>       memory[pointer] </span><span style="color:#FF9492;" data-v-23b94800>=</span><span style="color:#DBB7FF;" data-v-23b94800> chr</span><span style="color:#F0F3F6;" data-v-23b94800>(got_input[</span><span style="color:#91CBFF;" data-v-23b94800>0</span><span style="color:#F0F3F6;" data-v-23b94800>])</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>   }</span><span style="color:#FF9492;" data-v-23b94800>else</span><span style="color:#FF9492;" data-v-23b94800> if</span><span style="color:#F0F3F6;" data-v-23b94800> command </span><span style="color:#FF9492;" data-v-23b94800>==</span><span style="color:#ADDCFF;" data-v-23b94800> &#39;[&#39;</span><span style="color:#F0F3F6;" data-v-23b94800> {</span></span>
<span class="line" data-v-23b94800><span style="color:#FF9492;" data-v-23b94800>       if</span><span style="color:#F0F3F6;" data-v-23b94800> memory[pointer] </span><span style="color:#FF9492;" data-v-23b94800>==</span><span style="color:#FFB1AF;font-style:italic;" data-v-23b94800> 0</span><span style="color:#F0F3F6;" data-v-23b94800> {</span></span>
<span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>           open_brackets</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#91CBFF;" data-v-23b94800> 1</span></span>
<span class="line" data-v-23b94800><span style="color:#FF9492;" data-v-23b94800>           for</span><span style="color:#DBB7FF;" data-v-23b94800> open_brackets</span><span style="color:#F0F3F6;" data-v-23b94800> {</span></span>
<span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>               code_ptr</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#F0F3F6;" data-v-23b94800> code_ptr </span><span style="color:#FF9492;" data-v-23b94800>+</span><span style="color:#91CBFF;" data-v-23b94800> 1</span></span>
<span class="line" data-v-23b94800></span>
<span class="line" data-v-23b94800><span style="color:#FF9492;" data-v-23b94800>               if</span><span style="color:#F0F3F6;" data-v-23b94800> code[code_ptr] </span><span style="color:#FF9492;" data-v-23b94800>==</span><span style="color:#ADDCFF;" data-v-23b94800> &#39;[&#39;</span><span style="color:#F0F3F6;" data-v-23b94800> {</span></span>
<span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>                   open_brackets</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#F0F3F6;" data-v-23b94800> open_brackets </span><span style="color:#FF9492;" data-v-23b94800>+</span><span style="color:#91CBFF;" data-v-23b94800> 1</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>               } </span><span style="color:#FF9492;" data-v-23b94800>else</span><span style="color:#FF9492;" data-v-23b94800> if</span><span style="color:#F0F3F6;" data-v-23b94800> code[code_ptr] </span><span style="color:#FF9492;" data-v-23b94800>==</span><span style="color:#ADDCFF;" data-v-23b94800> &#39;]&#39;</span><span style="color:#F0F3F6;" data-v-23b94800> {</span></span>
<span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>                   open_brackets</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#F0F3F6;" data-v-23b94800> open_brackets </span><span style="color:#FF9492;" data-v-23b94800>-</span><span style="color:#91CBFF;" data-v-23b94800> 1</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>               }</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>           }</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>       } </span><span style="color:#FF9492;" data-v-23b94800>else</span><span style="color:#F0F3F6;" data-v-23b94800> {</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>           loop_stack </span><span style="color:#FF9492;" data-v-23b94800>&lt;&lt;</span><span style="color:#F0F3F6;" data-v-23b94800> code_ptr</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>       }</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>   } </span><span style="color:#FF9492;" data-v-23b94800>else</span><span style="color:#FF9492;" data-v-23b94800> if</span><span style="color:#F0F3F6;" data-v-23b94800> command </span><span style="color:#FF9492;" data-v-23b94800>==</span><span style="color:#ADDCFF;" data-v-23b94800> &#39;]&#39;</span><span style="color:#F0F3F6;" data-v-23b94800> {</span></span>
<span class="line" data-v-23b94800><span style="color:#FF9492;" data-v-23b94800>       if</span><span style="color:#F0F3F6;" data-v-23b94800> memory[pointer] </span><span style="color:#FF9492;" data-v-23b94800>!=</span><span style="color:#FFB1AF;font-style:italic;" data-v-23b94800> 0</span><span style="color:#F0F3F6;" data-v-23b94800> {</span></span>
<span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>           code_ptr</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#F0F3F6;" data-v-23b94800> loop_stack[</span><span style="color:#FF9492;" data-v-23b94800>len</span><span style="color:#F0F3F6;" data-v-23b94800>(loop_stack) </span><span style="color:#FF9492;" data-v-23b94800>-</span><span style="color:#91CBFF;" data-v-23b94800> 1</span><span style="color:#F0F3F6;" data-v-23b94800>]</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>       } </span><span style="color:#FF9492;" data-v-23b94800>else</span><span style="color:#F0F3F6;" data-v-23b94800> {</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>           loop_stack </span><span style="color:#FF9492;" data-v-23b94800>&gt;&gt;</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>       }</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>   }</span></span>
<span class="line" data-v-23b94800></span>
<span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>   code_ptr</span><span style="color:#FF9492;" data-v-23b94800> =</span><span style="color:#F0F3F6;" data-v-23b94800> code_ptr </span><span style="color:#FF9492;" data-v-23b94800>+</span><span style="color:#91CBFF;" data-v-23b94800> 1</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>}</span></span>
<span class="line" data-v-23b94800></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true" data-v-23b94800><span class="line-number" data-v-23b94800>26</span><br data-v-23b94800><span class="line-number" data-v-23b94800>27</span><br data-v-23b94800><span class="line-number" data-v-23b94800>28</span><br data-v-23b94800><span class="line-number" data-v-23b94800>29</span><br data-v-23b94800><span class="line-number" data-v-23b94800>30</span><br data-v-23b94800><span class="line-number" data-v-23b94800>31</span><br data-v-23b94800><span class="line-number" data-v-23b94800>32</span><br data-v-23b94800><span class="line-number" data-v-23b94800>33</span><br data-v-23b94800><span class="line-number" data-v-23b94800>34</span><br data-v-23b94800><span class="line-number" data-v-23b94800>35</span><br data-v-23b94800><span class="line-number" data-v-23b94800>36</span><br data-v-23b94800><span class="line-number" data-v-23b94800>37</span><br data-v-23b94800><span class="line-number" data-v-23b94800>38</span><br data-v-23b94800><span class="line-number" data-v-23b94800>39</span><br data-v-23b94800><span class="line-number" data-v-23b94800>40</span><br data-v-23b94800><span class="line-number" data-v-23b94800>41</span><br data-v-23b94800><span class="line-number" data-v-23b94800>42</span><br data-v-23b94800><span class="line-number" data-v-23b94800>43</span><br data-v-23b94800><span class="line-number" data-v-23b94800>44</span><br data-v-23b94800><span class="line-number" data-v-23b94800>45</span><br data-v-23b94800><span class="line-number" data-v-23b94800>46</span><br data-v-23b94800><span class="line-number" data-v-23b94800>47</span><br data-v-23b94800><span class="line-number" data-v-23b94800>48</span><br data-v-23b94800><span class="line-number" data-v-23b94800>49</span><br data-v-23b94800><span class="line-number" data-v-23b94800>50</span><br data-v-23b94800><span class="line-number" data-v-23b94800>51</span><br data-v-23b94800><span class="line-number" data-v-23b94800>52</span><br data-v-23b94800><span class="line-number" data-v-23b94800>53</span><br data-v-23b94800><span class="line-number" data-v-23b94800>54</span><br data-v-23b94800><span class="line-number" data-v-23b94800>55</span><br data-v-23b94800><span class="line-number" data-v-23b94800>56</span><br data-v-23b94800><span class="line-number" data-v-23b94800>57</span><br data-v-23b94800><span class="line-number" data-v-23b94800>58</span><br data-v-23b94800><span class="line-number" data-v-23b94800>59</span><br data-v-23b94800><span class="line-number" data-v-23b94800>60</span><br data-v-23b94800><span class="line-number" data-v-23b94800>61</span><br data-v-23b94800><span class="line-number" data-v-23b94800>62</span><br data-v-23b94800><span class="line-number" data-v-23b94800>63</span><br data-v-23b94800><span class="line-number" data-v-23b94800>64</span><br data-v-23b94800><span class="line-number" data-v-23b94800>65</span><br data-v-23b94800><span class="line-number" data-v-23b94800>66</span><br data-v-23b94800><span class="line-number" data-v-23b94800>67</span><br data-v-23b94800></div></div><p data-v-23b94800><strong data-v-23b94800>Breakdown:</strong></p><ol data-v-23b94800><li data-v-23b94800>The current code in pointer is stored in the variable <code data-v-23b94800>command</code>.</li><li data-v-23b94800>All of the other operations done in the if else sections are done as it is defined in the <a href="./#explaining-characters" data-v-23b94800>Explaining Characters</a></li></ol><p data-v-23b94800>Let&#39;s test the interpreter, by writing a &quot;simple&quot; brainfuck program:</p><div class="language-md vp-adaptive-theme" data-v-23b94800><button title="Copy Code" class="copy" data-v-23b94800></button><span class="lang" data-v-23b94800>md</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-23b94800><code data-v-23b94800><span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>++++++++++[</span><span style="color:#ADDCFF;" data-v-23b94800>&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-</span><span style="color:#F0F3F6;" data-v-23b94800>]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.</span></span>
<span class="line" data-v-23b94800></span></code></pre></div><p data-v-23b94800>The code above is to print <code data-v-23b94800>Hello World!</code></p><p data-v-23b94800>If we run the interpreter by saving the bf program in helloworld.bf.</p><div class="language-sh vp-adaptive-theme" data-v-23b94800><button title="Copy Code" class="copy" data-v-23b94800></button><span class="lang" data-v-23b94800>sh</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-23b94800><code data-v-23b94800><span class="line" data-v-23b94800><span style="color:#FFB757;" data-v-23b94800>danfe</span><span style="color:#ADDCFF;" data-v-23b94800> run</span><span style="color:#ADDCFF;" data-v-23b94800> main.df</span><span style="color:#ADDCFF;" data-v-23b94800> ./helloworld.bf</span></span>
<span class="line" data-v-23b94800></span></code></pre></div><div class="language-md vp-adaptive-theme" data-v-23b94800><button title="Copy Code" class="copy" data-v-23b94800></button><span class="lang" data-v-23b94800>md</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-23b94800><code data-v-23b94800><span class="line" data-v-23b94800><span style="color:#91CBFF;font-weight:bold;" data-v-23b94800># Output</span></span>
<span class="line" data-v-23b94800><span style="color:#F0F3F6;" data-v-23b94800>Hello World!</span></span>
<span class="line" data-v-23b94800></span></code></pre></div><p data-v-23b94800>The full code is provided in this github repo: <a href="https://github.com/danfe-df/danfe-v-brainfuk" target="_blank" rel="noreferrer" data-v-23b94800>Link</a></p><h2 id="main-takeaway" tabindex="-1" data-v-23b94800>Main Takeaway <a class="header-anchor" href="#main-takeaway" aria-label="Permalink to &quot;Main Takeaway&quot;" data-v-23b94800>‚Äã</a></h2><p data-v-23b94800>Writing an interpreter for brainfuck is <code data-v-23b94800>easier</code> than writing an actual brainfuck hello world program. Even tho, I created the whole interpreter I still can&#39;t write a bf program properly. It just shows how incredibly and masterfully the brainfuck esolang was created.</p><p data-v-23b94800><span style="color:gray;font-size:14px;" data-v-23b94800>Date: 2024-11-10</span><img src="`+l+'" style="height:170px;position:absolute;right:0;" data-v-23b94800></p>',34)]))}const y=s(p,[["render",o],["__scopeId","data-v-23b94800"]]);export{i as __pageData,y as default};
