import{_ as n,c as a,a1 as e,o}from"./chunks/framework.BDxlaA_J.js";const u=JSON.parse('{"title":"Testing VLANG","description":"","frontmatter":{"title":"Testing VLANG","date":"2024-10-12T00:00:00.000Z"},"headers":[],"relativePath":"blog/2024-10-12/index.md","filePath":"blog/2024-10-12/index.md"}'),l={name:"blog/2024-10-12/index.md"};function t(p,s,r,c,i,F){return o(),a("div",null,s[0]||(s[0]=[e(`<h1 id="testing-vlang" tabindex="-1">Testing VLANG <a class="header-anchor" href="#testing-vlang" aria-label="Permalink to &quot;Testing VLANG&quot;">​</a></h1><p><a href="/blog">&lt;- Back to blogs</a></p><p>While searching, I discovered a programming language called <a href="https://vlang.io" target="_blank" rel="noreferrer">VLANG</a> (or simply &quot;V&quot;). It’s intriguing because its syntax feels very <code>similar</code> to <a href="https://go.dev/" target="_blank" rel="noreferrer">Go</a>, but with a few design choices that make it look even <code>cleaner</code>. For instance, V includes <code>enums</code> and <code>option</code> types, and its error handling is like Go’s—but arguably better. V uses the <code>or</code> keyword for error handling, which makes the code more readable and streamlined.</p><p>Here&#39;s a quick example of error handling in V:</p><div class="language-v vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">v</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0"><code><span class="line"><span style="color:#F0F3F6;">x</span><span style="color:#FF9492;"> :=</span><span style="color:#91CBFF;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">fn</span><span style="color:#DBB7FF;"> evaluate_x</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">!</span><span style="color:#FF9492;">string</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#DBB7FF;"> error</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;How could x be 10?!!!!&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#ADDCFF;"> &quot;Thankgod! x in not 10!!&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">output_string</span><span style="color:#FF9492;"> :=</span><span style="color:#DBB7FF;"> evaluate_x</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">or</span><span style="color:#F0F3F6;"> {  </span><span style="color:#BDC4CC;">// or keyword executes if the function returns with error</span></span>
<span class="line"><span style="color:#DBB7FF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;The function returned with error&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    return</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(output_string)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>V uses a similar approach for handling <code>null</code> returns, making it even easier to work with optional values. I’m excited to dig deeper into this language and build something <code>cool</code> with it!</p><p><a href="https://letterbird.co/sai" target="_blank" rel="noreferrer">Reply via Email</a></p><p><span style="color:gray;font-size:14px;">Date: 2024-10-12</span></p>`,8)]))}const y=n(l,[["render",t]]);export{u as __pageData,y as default};
