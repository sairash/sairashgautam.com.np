import{_ as s,c as t,a1 as n,o as f}from"./chunks/framework.GKu-Ijuu.js";const F=JSON.parse('{"title":"Writing a .bf interpreter","description":"","frontmatter":{"title":"Writing a .bf interpreter","date":"2024-11-10T00:00:00.000Z"},"headers":[],"relativePath":"blog/2024-11-10/index.md","filePath":"blog/2024-11-10/index.md"}'),e={name:"blog/2024-11-10/index.md"};function l(p,a,d,o,r,c){return f(),t("div",null,a[0]||(a[0]=[n(`<h1 id="writing-a-bf-interpreter" tabindex="-1" data-v-4532f26f>Writing a .bf interpreter <a class="header-anchor" href="#writing-a-bf-interpreter" aria-label="Permalink to &quot;Writing a .bf interpreter&quot;" data-v-4532f26f>‚Äã</a></h1><p data-v-4532f26f>Curious about what ‚Äú.bf‚Äù is? Don‚Äôt worry‚Äîyou‚Äôre not alone! The ‚Äú.bf‚Äù extension belongs to <code data-v-4532f26f>Brainfuck</code>, an &quot;esoteric language&quot; or esolang. Unlike conventional programming languages, esolangs are designed to push the boundaries of how we think about programming. Brainfuck, invented by Urban M√ºller in <code data-v-4532f26f>1993</code>, is a classic in this genre. M√ºller created it with the ambitious goal of making a language for which he could write the smallest possible compiler‚Äîa feat he achieved with a compiler just 240 bytes in size ü§Ø.</p><p data-v-4532f26f>I‚Äôve always been fascinated by the quirks of esoteric languages, so I decided to dive into Brainfuck by creating my own interpreter for it. And, just to add a personal twist, I built the interpreter in a language I developed myself, called Danfe! Brainfuck, despite its intimidating name, only uses eight characters: <code data-v-4532f26f>&gt;</code>, <code data-v-4532f26f>&lt;</code>, <code data-v-4532f26f>+</code>, <code data-v-4532f26f>-</code>, <code data-v-4532f26f>.</code>, <code data-v-4532f26f>,</code>, <code data-v-4532f26f>[</code>, and <code data-v-4532f26f>]</code>. Each character has a unique function, and together, they create a surprisingly powerful (and challenging!) language. Let‚Äôs break down what each symbol does and explore how they fit together in this mind-bending language.</p><h2 id="explaining-characters" tabindex="-1" data-v-4532f26f>Explaining Characters <a class="header-anchor" href="#explaining-characters" aria-label="Permalink to &quot;Explaining Characters&quot;" data-v-4532f26f>‚Äã</a></h2><table tabindex="0" data-v-4532f26f><thead data-v-4532f26f><tr data-v-4532f26f><th data-v-4532f26f>Keyword</th><th data-v-4532f26f>Info</th><th data-v-4532f26f>C equivalent</th></tr></thead><tbody data-v-4532f26f><tr data-v-4532f26f><td data-v-4532f26f><code data-v-4532f26f>&gt;</code></td><td data-v-4532f26f>Increment the pointer.</td><td data-v-4532f26f>++p</td></tr><tr data-v-4532f26f><td data-v-4532f26f><code data-v-4532f26f>&lt;</code></td><td data-v-4532f26f>Decrement the pointer.</td><td data-v-4532f26f>--p</td></tr><tr data-v-4532f26f><td data-v-4532f26f><code data-v-4532f26f>+</code></td><td data-v-4532f26f>Increment the byte at the pointer.</td><td data-v-4532f26f>++*p</td></tr><tr data-v-4532f26f><td data-v-4532f26f><code data-v-4532f26f>-</code></td><td data-v-4532f26f>Decrement the byte at the pointer.</td><td data-v-4532f26f>--*p</td></tr><tr data-v-4532f26f><td data-v-4532f26f><code data-v-4532f26f>.</code></td><td data-v-4532f26f>Output the byte at the pointer.</td><td data-v-4532f26f>putchar(*p)</td></tr><tr data-v-4532f26f><td data-v-4532f26f><code data-v-4532f26f>,</code></td><td data-v-4532f26f>Input a byte and store it in the byte at the pointer.</td><td data-v-4532f26f>*p = getchar()</td></tr><tr data-v-4532f26f><td data-v-4532f26f><code data-v-4532f26f>[</code></td><td data-v-4532f26f>Jump forward past the matching ] if the byte at the pointer is zero.</td><td data-v-4532f26f>while (*p) {</td></tr><tr data-v-4532f26f><td data-v-4532f26f><code data-v-4532f26f>]</code></td><td data-v-4532f26f>Jump backward to the matching [ unless the byte at the pointer is zero.</td><td data-v-4532f26f>}</td></tr></tbody></table><div class="info custom-block" data-v-4532f26f><p class="custom-block-title" data-v-4532f26f>INFO</p><p data-v-4532f26f><code data-v-4532f26f>p</code> has been previously defined as a <code data-v-4532f26f>char*</code> in c equivalent.</p></div><h2 id="making-interpreter" tabindex="-1" data-v-4532f26f>Making Interpreter <a class="header-anchor" href="#making-interpreter" aria-label="Permalink to &quot;Making Interpreter&quot;" data-v-4532f26f>‚Äã</a></h2><p data-v-4532f26f>Now let&#39;s make the actual interpreter in <code data-v-4532f26f>danfe</code>:</p><div class="language-danfe vp-adaptive-theme line-numbers-mode" data-v-4532f26f><button title="Copy Code" class="copy" data-v-4532f26f></button><span class="lang" data-v-4532f26f>danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-4532f26f><code data-v-4532f26f><span class="line" data-v-4532f26f><span style="color:#FF9492;" data-v-4532f26f>if</span><span style="color:#FF9492;" data-v-4532f26f> len</span><span style="color:#F0F3F6;" data-v-4532f26f>(__args__) </span><span style="color:#FF9492;" data-v-4532f26f>&lt;</span><span style="color:#FFB1AF;font-style:italic;" data-v-4532f26f> 2</span><span style="color:#F0F3F6;" data-v-4532f26f> {</span></span>
<span class="line" data-v-4532f26f><span style="color:#DBB7FF;" data-v-4532f26f>   panic</span><span style="color:#F0F3F6;" data-v-4532f26f>(</span><span style="color:#ADDCFF;" data-v-4532f26f>&quot;Path to the bf code file is needed!&quot;</span><span style="color:#F0F3F6;" data-v-4532f26f>)</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>}</span></span>
<span class="line" data-v-4532f26f></span>
<span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>key</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#F0F3F6;" data-v-4532f26f> __args__ </span><span style="color:#FF9492;" data-v-4532f26f>&gt;&gt;</span></span>
<span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>key</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#F0F3F6;" data-v-4532f26f> key[</span><span style="color:#91CBFF;" data-v-4532f26f>0</span><span style="color:#F0F3F6;" data-v-4532f26f>]</span></span>
<span class="line" data-v-4532f26f></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true" data-v-4532f26f><span class="line-number" data-v-4532f26f>1</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>2</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>3</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>4</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>5</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>6</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>7</span><br data-v-4532f26f></div></div><p data-v-4532f26f><strong data-v-4532f26f>Breakdown:</strong></p><ol data-v-4532f26f><li data-v-4532f26f><code data-v-4532f26f>__args__</code> provides the arguments passed by user while running the program.</li><li data-v-4532f26f>We check the length of the <code data-v-4532f26f>__args__</code> and if it is less than 2 meaning we don&#39;t have an input <code data-v-4532f26f>.bf</code> file we <code data-v-4532f26f>panic</code> and stop the program.</li><li data-v-4532f26f><code data-v-4532f26f>__agrs__ &gt;&gt;</code> pops the last value from <code data-v-4532f26f>__args__</code> and puts the value in key</li><li data-v-4532f26f><code data-v-4532f26f>key[0]</code> takes the key value from the table and puts it again in key</li></ol><p data-v-4532f26f>Now let&#39;s read contents of the file defined in the identifier <code data-v-4532f26f>key</code>:</p><div class="language-danfe vp-adaptive-theme line-numbers-mode" data-v-4532f26f><button title="Copy Code" class="copy" data-v-4532f26f></button><span class="lang" data-v-4532f26f>danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-4532f26f><code data-v-4532f26f><span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>code</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#FF9492;" data-v-4532f26f> v</span><span style="color:#F0F3F6;" data-v-4532f26f> {</span></span>
<span class="line" data-v-4532f26f><span style="color:#FF9492;" data-v-4532f26f>       import</span><span style="color:#F0F3F6;" data-v-4532f26f> os</span></span>
<span class="line" data-v-4532f26f><span style="color:#FF9492;" data-v-4532f26f>       return</span><span style="color:#F0F3F6;" data-v-4532f26f>(os.</span><span style="color:#DBB7FF;" data-v-4532f26f>read_file</span><span style="color:#F0F3F6;" data-v-4532f26f>(</span><span style="color:#ADDCFF;" data-v-4532f26f>&quot;</span><span style="color:#FF9492;" data-v-4532f26f>%i{</span><span style="color:#ADDCFF;" data-v-4532f26f>key</span><span style="color:#FF9492;" data-v-4532f26f>}</span><span style="color:#ADDCFF;" data-v-4532f26f>&quot;</span><span style="color:#F0F3F6;" data-v-4532f26f>)</span><span style="color:#FF9492;" data-v-4532f26f>!</span><span style="color:#F0F3F6;" data-v-4532f26f>)</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>} </span><span style="color:#FF9492;" data-v-4532f26f>endv</span></span>
<span class="line" data-v-4532f26f></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true" data-v-4532f26f><span class="line-number" data-v-4532f26f>8</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>9</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>10</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>11</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>12</span><br data-v-4532f26f></div></div><p data-v-4532f26f><strong data-v-4532f26f>Breakdown:</strong></p><ol data-v-4532f26f><li data-v-4532f26f>The <code data-v-4532f26f>v {</code> initiates a vblock. Everything written inside it is executed through v binary.</li><li data-v-4532f26f>The output of the v code is stored in the variable <code data-v-4532f26f>code</code>.</li></ol><p data-v-4532f26f>Now let&#39;s make the memory block of our interpreter.</p><div class="language-danfe vp-adaptive-theme line-numbers-mode" data-v-4532f26f><button title="Copy Code" class="copy" data-v-4532f26f></button><span class="lang" data-v-4532f26f>danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-4532f26f><code data-v-4532f26f><span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>memory</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#F0F3F6;" data-v-4532f26f> []</span></span>
<span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>pointer</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#91CBFF;" data-v-4532f26f> 0</span></span>
<span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>code_ptr</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#91CBFF;" data-v-4532f26f> 0</span></span>
<span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>loop_stack</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#F0F3F6;" data-v-4532f26f> []</span></span>
<span class="line" data-v-4532f26f></span>
<span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>x</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#91CBFF;" data-v-4532f26f> 0</span></span>
<span class="line" data-v-4532f26f></span>
<span class="line" data-v-4532f26f><span style="color:#BDC4CC;" data-v-4532f26f># create memory block</span></span>
<span class="line" data-v-4532f26f><span style="color:#FF9492;" data-v-4532f26f>for</span><span style="color:#F0F3F6;" data-v-4532f26f> x </span><span style="color:#FF9492;" data-v-4532f26f>&lt;</span><span style="color:#FFB1AF;font-style:italic;" data-v-4532f26f> 3000</span><span style="color:#F0F3F6;" data-v-4532f26f> {</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>   memory </span><span style="color:#FF9492;" data-v-4532f26f>&lt;&lt;</span><span style="color:#91CBFF;" data-v-4532f26f> 0</span></span>
<span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>   x</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#F0F3F6;" data-v-4532f26f> x </span><span style="color:#FF9492;" data-v-4532f26f>+</span><span style="color:#91CBFF;" data-v-4532f26f> 1</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>}</span></span>
<span class="line" data-v-4532f26f></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true" data-v-4532f26f><span class="line-number" data-v-4532f26f>13</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>14</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>15</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>16</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>17</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>18</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>19</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>20</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>21</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>22</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>23</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>24</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>25</span><br data-v-4532f26f></div></div><p data-v-4532f26f><strong data-v-4532f26f>Breakdown:</strong></p><ol data-v-4532f26f><li data-v-4532f26f>Initialize all the arrays needed, and fill in the memory array with <code data-v-4532f26f>3000</code> <code data-v-4532f26f>zeros</code>.</li></ol><p data-v-4532f26f>Now the block which does the actual interpretation.</p><div class="language-danfe vp-adaptive-theme line-numbers-mode" data-v-4532f26f><button title="Copy Code" class="copy" data-v-4532f26f></button><span class="lang" data-v-4532f26f>danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-4532f26f><code data-v-4532f26f><span class="line" data-v-4532f26f><span style="color:#FF9492;" data-v-4532f26f>for</span><span style="color:#F0F3F6;" data-v-4532f26f> code_ptr </span><span style="color:#FF9492;" data-v-4532f26f>&lt;</span><span style="color:#FF9492;" data-v-4532f26f> len</span><span style="color:#F0F3F6;" data-v-4532f26f>(code) {</span></span>
<span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>   command</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#F0F3F6;" data-v-4532f26f> code[code_ptr]</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>  </span></span>
<span class="line" data-v-4532f26f><span style="color:#FF9492;" data-v-4532f26f>   if</span><span style="color:#F0F3F6;" data-v-4532f26f> command </span><span style="color:#FF9492;" data-v-4532f26f>==</span><span style="color:#ADDCFF;" data-v-4532f26f> &quot;&gt;&quot;</span><span style="color:#F0F3F6;" data-v-4532f26f> {</span></span>
<span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>       pointer</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#F0F3F6;" data-v-4532f26f> pointer </span><span style="color:#FF9492;" data-v-4532f26f>+</span><span style="color:#91CBFF;" data-v-4532f26f> 1</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>   }</span><span style="color:#FF9492;" data-v-4532f26f>else</span><span style="color:#FF9492;" data-v-4532f26f> if</span><span style="color:#F0F3F6;" data-v-4532f26f> command </span><span style="color:#FF9492;" data-v-4532f26f>==</span><span style="color:#ADDCFF;" data-v-4532f26f> &quot;&lt;&quot;</span><span style="color:#F0F3F6;" data-v-4532f26f> {</span></span>
<span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>       pointer</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#F0F3F6;" data-v-4532f26f> pointer </span><span style="color:#FF9492;" data-v-4532f26f>-</span><span style="color:#91CBFF;" data-v-4532f26f> 1</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>   }</span><span style="color:#FF9492;" data-v-4532f26f>else</span><span style="color:#FF9492;" data-v-4532f26f> if</span><span style="color:#F0F3F6;" data-v-4532f26f> command </span><span style="color:#FF9492;" data-v-4532f26f>==</span><span style="color:#ADDCFF;" data-v-4532f26f> &quot;+&quot;</span><span style="color:#F0F3F6;" data-v-4532f26f> {</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>       memory[pointer] </span><span style="color:#FF9492;" data-v-4532f26f>=</span><span style="color:#F0F3F6;" data-v-4532f26f> (memory[pointer] </span><span style="color:#FF9492;" data-v-4532f26f>+</span><span style="color:#91CBFF;" data-v-4532f26f> 1</span><span style="color:#F0F3F6;" data-v-4532f26f>) </span><span style="color:#FF9492;" data-v-4532f26f>%</span><span style="color:#91CBFF;" data-v-4532f26f> 256</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>   }</span><span style="color:#FF9492;" data-v-4532f26f>else</span><span style="color:#FF9492;" data-v-4532f26f> if</span><span style="color:#F0F3F6;" data-v-4532f26f> command </span><span style="color:#FF9492;" data-v-4532f26f>==</span><span style="color:#ADDCFF;" data-v-4532f26f> &quot;-&quot;</span><span style="color:#F0F3F6;" data-v-4532f26f> {</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>       memory[pointer] </span><span style="color:#FF9492;" data-v-4532f26f>=</span><span style="color:#F0F3F6;" data-v-4532f26f> (memory[pointer] </span><span style="color:#FF9492;" data-v-4532f26f>-</span><span style="color:#91CBFF;" data-v-4532f26f> 1</span><span style="color:#F0F3F6;" data-v-4532f26f>) </span><span style="color:#FF9492;" data-v-4532f26f>%</span><span style="color:#91CBFF;" data-v-4532f26f> 256</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>   }</span><span style="color:#FF9492;" data-v-4532f26f>else</span><span style="color:#FF9492;" data-v-4532f26f> if</span><span style="color:#F0F3F6;" data-v-4532f26f> command </span><span style="color:#FF9492;" data-v-4532f26f>==</span><span style="color:#ADDCFF;" data-v-4532f26f> &quot;.&quot;</span><span style="color:#F0F3F6;" data-v-4532f26f> {</span></span>
<span class="line" data-v-4532f26f><span style="color:#DBB7FF;" data-v-4532f26f>       print</span><span style="color:#F0F3F6;" data-v-4532f26f>(</span><span style="color:#DBB7FF;" data-v-4532f26f>chr</span><span style="color:#F0F3F6;" data-v-4532f26f>(memory[pointer]))</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>   }</span><span style="color:#FF9492;" data-v-4532f26f>else</span><span style="color:#FF9492;" data-v-4532f26f> if</span><span style="color:#F0F3F6;" data-v-4532f26f> command </span><span style="color:#FF9492;" data-v-4532f26f>==</span><span style="color:#ADDCFF;" data-v-4532f26f> &quot;,&quot;</span><span style="color:#F0F3F6;" data-v-4532f26f>{</span></span>
<span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>       got_input</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#FF9492;" data-v-4532f26f> input</span><span style="color:#F0F3F6;" data-v-4532f26f>(</span><span style="color:#ADDCFF;" data-v-4532f26f>&quot;&quot;</span><span style="color:#F0F3F6;" data-v-4532f26f>)</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>       memory[pointer] </span><span style="color:#FF9492;" data-v-4532f26f>=</span><span style="color:#DBB7FF;" data-v-4532f26f> chr</span><span style="color:#F0F3F6;" data-v-4532f26f>(got_input[</span><span style="color:#91CBFF;" data-v-4532f26f>0</span><span style="color:#F0F3F6;" data-v-4532f26f>])</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>   }</span><span style="color:#FF9492;" data-v-4532f26f>else</span><span style="color:#FF9492;" data-v-4532f26f> if</span><span style="color:#F0F3F6;" data-v-4532f26f> command </span><span style="color:#FF9492;" data-v-4532f26f>==</span><span style="color:#ADDCFF;" data-v-4532f26f> &#39;[&#39;</span><span style="color:#F0F3F6;" data-v-4532f26f> {</span></span>
<span class="line" data-v-4532f26f><span style="color:#FF9492;" data-v-4532f26f>       if</span><span style="color:#F0F3F6;" data-v-4532f26f> memory[pointer] </span><span style="color:#FF9492;" data-v-4532f26f>==</span><span style="color:#FFB1AF;font-style:italic;" data-v-4532f26f> 0</span><span style="color:#F0F3F6;" data-v-4532f26f> {</span></span>
<span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>           open_brackets</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#91CBFF;" data-v-4532f26f> 1</span></span>
<span class="line" data-v-4532f26f><span style="color:#FF9492;" data-v-4532f26f>           for</span><span style="color:#DBB7FF;" data-v-4532f26f> open_brackets</span><span style="color:#F0F3F6;" data-v-4532f26f> {</span></span>
<span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>               code_ptr</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#F0F3F6;" data-v-4532f26f> code_ptr </span><span style="color:#FF9492;" data-v-4532f26f>+</span><span style="color:#91CBFF;" data-v-4532f26f> 1</span></span>
<span class="line" data-v-4532f26f></span>
<span class="line" data-v-4532f26f><span style="color:#FF9492;" data-v-4532f26f>               if</span><span style="color:#F0F3F6;" data-v-4532f26f> code[code_ptr] </span><span style="color:#FF9492;" data-v-4532f26f>==</span><span style="color:#ADDCFF;" data-v-4532f26f> &#39;[&#39;</span><span style="color:#F0F3F6;" data-v-4532f26f> {</span></span>
<span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>                   open_brackets</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#F0F3F6;" data-v-4532f26f> open_brackets </span><span style="color:#FF9492;" data-v-4532f26f>+</span><span style="color:#91CBFF;" data-v-4532f26f> 1</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>               } </span><span style="color:#FF9492;" data-v-4532f26f>else</span><span style="color:#FF9492;" data-v-4532f26f> if</span><span style="color:#F0F3F6;" data-v-4532f26f> code[code_ptr] </span><span style="color:#FF9492;" data-v-4532f26f>==</span><span style="color:#ADDCFF;" data-v-4532f26f> &#39;]&#39;</span><span style="color:#F0F3F6;" data-v-4532f26f> {</span></span>
<span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>                   open_brackets</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#F0F3F6;" data-v-4532f26f> open_brackets </span><span style="color:#FF9492;" data-v-4532f26f>-</span><span style="color:#91CBFF;" data-v-4532f26f> 1</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>               }</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>           }</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>       } </span><span style="color:#FF9492;" data-v-4532f26f>else</span><span style="color:#F0F3F6;" data-v-4532f26f> {</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>           loop_stack </span><span style="color:#FF9492;" data-v-4532f26f>&lt;&lt;</span><span style="color:#F0F3F6;" data-v-4532f26f> code_ptr</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>       }</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>   } </span><span style="color:#FF9492;" data-v-4532f26f>else</span><span style="color:#FF9492;" data-v-4532f26f> if</span><span style="color:#F0F3F6;" data-v-4532f26f> command </span><span style="color:#FF9492;" data-v-4532f26f>==</span><span style="color:#ADDCFF;" data-v-4532f26f> &#39;]&#39;</span><span style="color:#F0F3F6;" data-v-4532f26f> {</span></span>
<span class="line" data-v-4532f26f><span style="color:#FF9492;" data-v-4532f26f>       if</span><span style="color:#F0F3F6;" data-v-4532f26f> memory[pointer] </span><span style="color:#FF9492;" data-v-4532f26f>!=</span><span style="color:#FFB1AF;font-style:italic;" data-v-4532f26f> 0</span><span style="color:#F0F3F6;" data-v-4532f26f> {</span></span>
<span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>           code_ptr</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#F0F3F6;" data-v-4532f26f> loop_stack[</span><span style="color:#FF9492;" data-v-4532f26f>len</span><span style="color:#F0F3F6;" data-v-4532f26f>(loop_stack) </span><span style="color:#FF9492;" data-v-4532f26f>-</span><span style="color:#91CBFF;" data-v-4532f26f> 1</span><span style="color:#F0F3F6;" data-v-4532f26f>]</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>       } </span><span style="color:#FF9492;" data-v-4532f26f>else</span><span style="color:#F0F3F6;" data-v-4532f26f> {</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>           loop_stack </span><span style="color:#FF9492;" data-v-4532f26f>&gt;&gt;</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>       }</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>   }</span></span>
<span class="line" data-v-4532f26f></span>
<span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>   code_ptr</span><span style="color:#FF9492;" data-v-4532f26f> =</span><span style="color:#F0F3F6;" data-v-4532f26f> code_ptr </span><span style="color:#FF9492;" data-v-4532f26f>+</span><span style="color:#91CBFF;" data-v-4532f26f> 1</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>}</span></span>
<span class="line" data-v-4532f26f></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true" data-v-4532f26f><span class="line-number" data-v-4532f26f>26</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>27</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>28</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>29</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>30</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>31</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>32</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>33</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>34</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>35</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>36</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>37</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>38</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>39</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>40</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>41</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>42</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>43</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>44</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>45</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>46</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>47</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>48</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>49</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>50</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>51</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>52</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>53</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>54</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>55</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>56</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>57</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>58</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>59</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>60</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>61</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>62</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>63</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>64</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>65</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>66</span><br data-v-4532f26f><span class="line-number" data-v-4532f26f>67</span><br data-v-4532f26f></div></div><p data-v-4532f26f><strong data-v-4532f26f>Breakdown:</strong></p><ol data-v-4532f26f><li data-v-4532f26f>The current code in pointer is stored in the variable <code data-v-4532f26f>command</code>.</li><li data-v-4532f26f>All of the other operations done in the if else sections are done as it is defined in the <a href="./#explaining-characters" data-v-4532f26f>Explaining Characters</a></li></ol><p data-v-4532f26f>Let&#39;s test the interpreter, by writing a simple brainfuck program:</p><div class="language-md vp-adaptive-theme" data-v-4532f26f><button title="Copy Code" class="copy" data-v-4532f26f></button><span class="lang" data-v-4532f26f>md</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-4532f26f><code data-v-4532f26f><span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>++++++++++[</span><span style="color:#ADDCFF;" data-v-4532f26f>&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-</span><span style="color:#F0F3F6;" data-v-4532f26f>]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.</span></span>
<span class="line" data-v-4532f26f></span></code></pre></div><p data-v-4532f26f>The code above is to print <code data-v-4532f26f>Hello World!</code></p><p data-v-4532f26f>If we run the interpreter by saving the bf program in helloworld.bf.</p><div class="language-sh vp-adaptive-theme" data-v-4532f26f><button title="Copy Code" class="copy" data-v-4532f26f></button><span class="lang" data-v-4532f26f>sh</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-4532f26f><code data-v-4532f26f><span class="line" data-v-4532f26f><span style="color:#FFB757;" data-v-4532f26f>danfe</span><span style="color:#ADDCFF;" data-v-4532f26f> run</span><span style="color:#ADDCFF;" data-v-4532f26f> main.df</span><span style="color:#ADDCFF;" data-v-4532f26f> ./helloworld.bf</span></span>
<span class="line" data-v-4532f26f></span></code></pre></div><div class="language-md vp-adaptive-theme" data-v-4532f26f><button title="Copy Code" class="copy" data-v-4532f26f></button><span class="lang" data-v-4532f26f>md</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-4532f26f><code data-v-4532f26f><span class="line" data-v-4532f26f><span style="color:#91CBFF;font-weight:bold;" data-v-4532f26f># Output</span></span>
<span class="line" data-v-4532f26f><span style="color:#F0F3F6;" data-v-4532f26f>Hello World!</span></span>
<span class="line" data-v-4532f26f></span></code></pre></div><p data-v-4532f26f>The full code is provided in this github repo: <a href="https://github.com/danfe-df/danfe-v-brainfuk" target="_blank" rel="noreferrer" data-v-4532f26f>Link</a></p><h2 id="main-takeaway" tabindex="-1" data-v-4532f26f>Main Takeaway <a class="header-anchor" href="#main-takeaway" aria-label="Permalink to &quot;Main Takeaway&quot;" data-v-4532f26f>‚Äã</a></h2><p data-v-4532f26f>Writing an interpreter for brainfuck is <code data-v-4532f26f>easier</code> than writing an actual brainfuck hello world program. Even tho, I created the whole interpreter I still can&#39;t write a bf program properly. It just shows how incredibly and masterfully the brainfuck esolang was created.</p>`,32)]))}const i=s(e,[["render",l],["__scopeId","data-v-4532f26f"]]);export{F as __pageData,i as default};
