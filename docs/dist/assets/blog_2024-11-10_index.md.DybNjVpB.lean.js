import{_ as s,c as t,a1 as n,o as c}from"./chunks/framework.BDxlaA_J.js";const e="/mascot/woe-is-me.png",F=JSON.parse('{"title":"Writing a .bf interpreter","description":"","frontmatter":{"title":"Writing a .bf interpreter","date":"2024-11-10T00:00:00.000Z"},"headers":[],"relativePath":"blog/2024-11-10/index.md","filePath":"blog/2024-11-10/index.md"}'),l={name:"blog/2024-11-10/index.md"};function p(o,a,d,b,r,f){return c(),t("div",null,a[0]||(a[0]=[n(`<h1 id="writing-a-bf-interpreter" tabindex="-1" data-v-c4af0baa>Writing a .bf interpreter <a class="header-anchor" href="#writing-a-bf-interpreter" aria-label="Permalink to &quot;Writing a .bf interpreter&quot;" data-v-c4af0baa>‚Äã</a></h1><p data-v-c4af0baa><a href="/blog" data-v-c4af0baa>&lt;- Back to blogs</a></p><p data-v-c4af0baa>Curious about what ‚Äú.bf‚Äù is? Don‚Äôt worry‚Äîyou‚Äôre not alone! The ‚Äú.bf‚Äù extension belongs to <code data-v-c4af0baa>Brainfuck</code>, an &quot;esoteric language&quot; or esolang. Unlike conventional programming languages, esolangs are designed to push the boundaries of how we think about programming. Brainfuck, invented by Urban M√ºller in <code data-v-c4af0baa>1993</code>, is a classic in this genre. M√ºller created it with the ambitious goal of making a language for which he could write the smallest possible compiler‚Äîa feat he achieved with a compiler just 240 bytes in size ü§Ø.</p><p data-v-c4af0baa>I‚Äôve always been fascinated by the quirks of esoteric languages, so I decided to dive into Brainfuck by creating my own interpreter for it. And, just to add a personal twist, I built the interpreter in a language I developed myself, called Danfe! Brainfuck, despite its intimidating name, only uses eight characters: <code data-v-c4af0baa>&gt;</code>, <code data-v-c4af0baa>&lt;</code>, <code data-v-c4af0baa>+</code>, <code data-v-c4af0baa>-</code>, <code data-v-c4af0baa>.</code>, <code data-v-c4af0baa>,</code>, <code data-v-c4af0baa>[</code>, and <code data-v-c4af0baa>]</code>. Each character has a unique function, and together, they create a surprisingly powerful (and challenging!) language. Let‚Äôs break down what each symbol does and explore how they fit together in this mind-bending language.</p><h2 id="explaining-characters" tabindex="-1" data-v-c4af0baa>Explaining Characters <a class="header-anchor" href="#explaining-characters" aria-label="Permalink to &quot;Explaining Characters&quot;" data-v-c4af0baa>‚Äã</a></h2><table tabindex="0" data-v-c4af0baa><thead data-v-c4af0baa><tr data-v-c4af0baa><th data-v-c4af0baa>Keyword</th><th data-v-c4af0baa>Info</th><th data-v-c4af0baa>C equivalent</th></tr></thead><tbody data-v-c4af0baa><tr data-v-c4af0baa><td data-v-c4af0baa><code data-v-c4af0baa>&gt;</code></td><td data-v-c4af0baa>Increment the pointer.</td><td data-v-c4af0baa>++p</td></tr><tr data-v-c4af0baa><td data-v-c4af0baa><code data-v-c4af0baa>&lt;</code></td><td data-v-c4af0baa>Decrement the pointer.</td><td data-v-c4af0baa>--p</td></tr><tr data-v-c4af0baa><td data-v-c4af0baa><code data-v-c4af0baa>+</code></td><td data-v-c4af0baa>Increment the byte at the pointer.</td><td data-v-c4af0baa>++*p</td></tr><tr data-v-c4af0baa><td data-v-c4af0baa><code data-v-c4af0baa>-</code></td><td data-v-c4af0baa>Decrement the byte at the pointer.</td><td data-v-c4af0baa>--*p</td></tr><tr data-v-c4af0baa><td data-v-c4af0baa><code data-v-c4af0baa>.</code></td><td data-v-c4af0baa>Output the byte at the pointer.</td><td data-v-c4af0baa>putchar(*p)</td></tr><tr data-v-c4af0baa><td data-v-c4af0baa><code data-v-c4af0baa>,</code></td><td data-v-c4af0baa>Input a byte and store it in the byte at the pointer.</td><td data-v-c4af0baa>*p = getchar()</td></tr><tr data-v-c4af0baa><td data-v-c4af0baa><code data-v-c4af0baa>[</code></td><td data-v-c4af0baa>Jump forward past the matching ] if the byte at the pointer is zero.</td><td data-v-c4af0baa>while (*p) {</td></tr><tr data-v-c4af0baa><td data-v-c4af0baa><code data-v-c4af0baa>]</code></td><td data-v-c4af0baa>Jump backward to the matching [ unless the byte at the pointer is zero.</td><td data-v-c4af0baa>}</td></tr></tbody></table><div class="info custom-block" data-v-c4af0baa><p class="custom-block-title" data-v-c4af0baa>INFO</p><p data-v-c4af0baa><code data-v-c4af0baa>p</code> has been previously defined as a <code data-v-c4af0baa>char*</code> in c equivalent.</p></div><h2 id="making-interpreter" tabindex="-1" data-v-c4af0baa>Making Interpreter <a class="header-anchor" href="#making-interpreter" aria-label="Permalink to &quot;Making Interpreter&quot;" data-v-c4af0baa>‚Äã</a></h2><p data-v-c4af0baa>Now let&#39;s make the actual interpreter in <code data-v-c4af0baa>danfe</code>:</p><div class="language-danfe vp-adaptive-theme line-numbers-mode" data-v-c4af0baa><button title="Copy Code" class="copy" data-v-c4af0baa></button><span class="lang" data-v-c4af0baa>danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-c4af0baa><code data-v-c4af0baa><span class="line" data-v-c4af0baa><span style="color:#FF9492;" data-v-c4af0baa>if</span><span style="color:#FF9492;" data-v-c4af0baa> len</span><span style="color:#F0F3F6;" data-v-c4af0baa>(__args__) </span><span style="color:#FF9492;" data-v-c4af0baa>&lt;</span><span style="color:#FFB1AF;font-style:italic;" data-v-c4af0baa> 2</span><span style="color:#F0F3F6;" data-v-c4af0baa> {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#DBB7FF;" data-v-c4af0baa>   panic</span><span style="color:#F0F3F6;" data-v-c4af0baa>(</span><span style="color:#ADDCFF;" data-v-c4af0baa>&quot;Path to the bf code file is needed!&quot;</span><span style="color:#F0F3F6;" data-v-c4af0baa>)</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>}</span></span>
<span class="line" data-v-c4af0baa></span>
<span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>key</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#F0F3F6;" data-v-c4af0baa> __args__ </span><span style="color:#FF9492;" data-v-c4af0baa>&gt;&gt;</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>key</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#F0F3F6;" data-v-c4af0baa> key[</span><span style="color:#91CBFF;" data-v-c4af0baa>0</span><span style="color:#F0F3F6;" data-v-c4af0baa>]</span></span>
<span class="line" data-v-c4af0baa></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true" data-v-c4af0baa><span class="line-number" data-v-c4af0baa>1</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>2</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>3</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>4</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>5</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>6</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>7</span><br data-v-c4af0baa></div></div><p data-v-c4af0baa><strong data-v-c4af0baa>Breakdown:</strong></p><ol data-v-c4af0baa><li data-v-c4af0baa><code data-v-c4af0baa>__args__</code> provides the arguments passed by user while running the program.</li><li data-v-c4af0baa>We check the length of the <code data-v-c4af0baa>__args__</code> and if it is less than 2 meaning we don&#39;t have an input <code data-v-c4af0baa>.bf</code> file we <code data-v-c4af0baa>panic</code> and stop the program.</li><li data-v-c4af0baa><code data-v-c4af0baa>__agrs__ &gt;&gt;</code> pops the last value from <code data-v-c4af0baa>__args__</code> and puts the value in key</li><li data-v-c4af0baa><code data-v-c4af0baa>key[0]</code> takes the key value from the table and puts it again in key</li></ol><p data-v-c4af0baa>Now let&#39;s read contents of the file defined in the identifier <code data-v-c4af0baa>key</code>:</p><div class="language-danfe vp-adaptive-theme line-numbers-mode" data-v-c4af0baa><button title="Copy Code" class="copy" data-v-c4af0baa></button><span class="lang" data-v-c4af0baa>danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-c4af0baa><code data-v-c4af0baa><span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>code</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#FF9492;" data-v-c4af0baa> v</span><span style="color:#F0F3F6;" data-v-c4af0baa> {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FF9492;" data-v-c4af0baa>       import</span><span style="color:#F0F3F6;" data-v-c4af0baa> os</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FF9492;" data-v-c4af0baa>       return</span><span style="color:#F0F3F6;" data-v-c4af0baa>(os.</span><span style="color:#DBB7FF;" data-v-c4af0baa>read_file</span><span style="color:#F0F3F6;" data-v-c4af0baa>(</span><span style="color:#ADDCFF;" data-v-c4af0baa>&quot;</span><span style="color:#FF9492;" data-v-c4af0baa>%i{</span><span style="color:#ADDCFF;" data-v-c4af0baa>key</span><span style="color:#FF9492;" data-v-c4af0baa>}</span><span style="color:#ADDCFF;" data-v-c4af0baa>&quot;</span><span style="color:#F0F3F6;" data-v-c4af0baa>)</span><span style="color:#FF9492;" data-v-c4af0baa>!</span><span style="color:#F0F3F6;" data-v-c4af0baa>)</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>} </span><span style="color:#FF9492;" data-v-c4af0baa>endv</span></span>
<span class="line" data-v-c4af0baa></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true" data-v-c4af0baa><span class="line-number" data-v-c4af0baa>8</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>9</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>10</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>11</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>12</span><br data-v-c4af0baa></div></div><p data-v-c4af0baa><strong data-v-c4af0baa>Breakdown:</strong></p><ol data-v-c4af0baa><li data-v-c4af0baa>The <code data-v-c4af0baa>v {</code> initiates a vblock. Everything written inside it is executed through v binary.</li><li data-v-c4af0baa>The output of the v code is stored in the variable <code data-v-c4af0baa>code</code>.</li></ol><p data-v-c4af0baa>Now let&#39;s make the memory block of our interpreter.</p><div class="language-danfe vp-adaptive-theme line-numbers-mode" data-v-c4af0baa><button title="Copy Code" class="copy" data-v-c4af0baa></button><span class="lang" data-v-c4af0baa>danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-c4af0baa><code data-v-c4af0baa><span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>memory</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#F0F3F6;" data-v-c4af0baa> []</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>pointer</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#91CBFF;" data-v-c4af0baa> 0</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>code_ptr</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#91CBFF;" data-v-c4af0baa> 0</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>loop_stack</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#F0F3F6;" data-v-c4af0baa> []</span></span>
<span class="line" data-v-c4af0baa></span>
<span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>x</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#91CBFF;" data-v-c4af0baa> 0</span></span>
<span class="line" data-v-c4af0baa></span>
<span class="line" data-v-c4af0baa><span style="color:#BDC4CC;" data-v-c4af0baa># create memory block</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FF9492;" data-v-c4af0baa>for</span><span style="color:#F0F3F6;" data-v-c4af0baa> x </span><span style="color:#FF9492;" data-v-c4af0baa>&lt;</span><span style="color:#FFB1AF;font-style:italic;" data-v-c4af0baa> 3000</span><span style="color:#F0F3F6;" data-v-c4af0baa> {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>   memory </span><span style="color:#FF9492;" data-v-c4af0baa>&lt;&lt;</span><span style="color:#91CBFF;" data-v-c4af0baa> 0</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>   x</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#F0F3F6;" data-v-c4af0baa> x </span><span style="color:#FF9492;" data-v-c4af0baa>+</span><span style="color:#91CBFF;" data-v-c4af0baa> 1</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>}</span></span>
<span class="line" data-v-c4af0baa></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true" data-v-c4af0baa><span class="line-number" data-v-c4af0baa>13</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>14</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>15</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>16</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>17</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>18</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>19</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>20</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>21</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>22</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>23</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>24</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>25</span><br data-v-c4af0baa></div></div><p data-v-c4af0baa><strong data-v-c4af0baa>Breakdown:</strong></p><ol data-v-c4af0baa><li data-v-c4af0baa>Initialize all the arrays needed, and fill in the memory array with <code data-v-c4af0baa>3000</code> <code data-v-c4af0baa>zeros</code>.</li></ol><p data-v-c4af0baa>Now the block which does the actual interpretation.</p><div class="language-danfe vp-adaptive-theme line-numbers-mode" data-v-c4af0baa><button title="Copy Code" class="copy" data-v-c4af0baa></button><span class="lang" data-v-c4af0baa>danfe</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-c4af0baa><code data-v-c4af0baa><span class="line" data-v-c4af0baa><span style="color:#FF9492;" data-v-c4af0baa>for</span><span style="color:#F0F3F6;" data-v-c4af0baa> code_ptr </span><span style="color:#FF9492;" data-v-c4af0baa>&lt;</span><span style="color:#FF9492;" data-v-c4af0baa> len</span><span style="color:#F0F3F6;" data-v-c4af0baa>(code) {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>   command</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#F0F3F6;" data-v-c4af0baa> code[code_ptr]</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>  </span></span>
<span class="line" data-v-c4af0baa><span style="color:#FF9492;" data-v-c4af0baa>   if</span><span style="color:#F0F3F6;" data-v-c4af0baa> command </span><span style="color:#FF9492;" data-v-c4af0baa>==</span><span style="color:#ADDCFF;" data-v-c4af0baa> &quot;&gt;&quot;</span><span style="color:#F0F3F6;" data-v-c4af0baa> {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>       pointer</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#F0F3F6;" data-v-c4af0baa> pointer </span><span style="color:#FF9492;" data-v-c4af0baa>+</span><span style="color:#91CBFF;" data-v-c4af0baa> 1</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>   }</span><span style="color:#FF9492;" data-v-c4af0baa>else</span><span style="color:#FF9492;" data-v-c4af0baa> if</span><span style="color:#F0F3F6;" data-v-c4af0baa> command </span><span style="color:#FF9492;" data-v-c4af0baa>==</span><span style="color:#ADDCFF;" data-v-c4af0baa> &quot;&lt;&quot;</span><span style="color:#F0F3F6;" data-v-c4af0baa> {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>       pointer</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#F0F3F6;" data-v-c4af0baa> pointer </span><span style="color:#FF9492;" data-v-c4af0baa>-</span><span style="color:#91CBFF;" data-v-c4af0baa> 1</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>   }</span><span style="color:#FF9492;" data-v-c4af0baa>else</span><span style="color:#FF9492;" data-v-c4af0baa> if</span><span style="color:#F0F3F6;" data-v-c4af0baa> command </span><span style="color:#FF9492;" data-v-c4af0baa>==</span><span style="color:#ADDCFF;" data-v-c4af0baa> &quot;+&quot;</span><span style="color:#F0F3F6;" data-v-c4af0baa> {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>       memory[pointer] </span><span style="color:#FF9492;" data-v-c4af0baa>=</span><span style="color:#F0F3F6;" data-v-c4af0baa> (memory[pointer] </span><span style="color:#FF9492;" data-v-c4af0baa>+</span><span style="color:#91CBFF;" data-v-c4af0baa> 1</span><span style="color:#F0F3F6;" data-v-c4af0baa>) </span><span style="color:#FF9492;" data-v-c4af0baa>%</span><span style="color:#91CBFF;" data-v-c4af0baa> 256</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>   }</span><span style="color:#FF9492;" data-v-c4af0baa>else</span><span style="color:#FF9492;" data-v-c4af0baa> if</span><span style="color:#F0F3F6;" data-v-c4af0baa> command </span><span style="color:#FF9492;" data-v-c4af0baa>==</span><span style="color:#ADDCFF;" data-v-c4af0baa> &quot;-&quot;</span><span style="color:#F0F3F6;" data-v-c4af0baa> {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>       memory[pointer] </span><span style="color:#FF9492;" data-v-c4af0baa>=</span><span style="color:#F0F3F6;" data-v-c4af0baa> (memory[pointer] </span><span style="color:#FF9492;" data-v-c4af0baa>-</span><span style="color:#91CBFF;" data-v-c4af0baa> 1</span><span style="color:#F0F3F6;" data-v-c4af0baa>) </span><span style="color:#FF9492;" data-v-c4af0baa>%</span><span style="color:#91CBFF;" data-v-c4af0baa> 256</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>   }</span><span style="color:#FF9492;" data-v-c4af0baa>else</span><span style="color:#FF9492;" data-v-c4af0baa> if</span><span style="color:#F0F3F6;" data-v-c4af0baa> command </span><span style="color:#FF9492;" data-v-c4af0baa>==</span><span style="color:#ADDCFF;" data-v-c4af0baa> &quot;.&quot;</span><span style="color:#F0F3F6;" data-v-c4af0baa> {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#DBB7FF;" data-v-c4af0baa>       print</span><span style="color:#F0F3F6;" data-v-c4af0baa>(</span><span style="color:#DBB7FF;" data-v-c4af0baa>chr</span><span style="color:#F0F3F6;" data-v-c4af0baa>(memory[pointer]))</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>   }</span><span style="color:#FF9492;" data-v-c4af0baa>else</span><span style="color:#FF9492;" data-v-c4af0baa> if</span><span style="color:#F0F3F6;" data-v-c4af0baa> command </span><span style="color:#FF9492;" data-v-c4af0baa>==</span><span style="color:#ADDCFF;" data-v-c4af0baa> &quot;,&quot;</span><span style="color:#F0F3F6;" data-v-c4af0baa>{</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>       got_input</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#FF9492;" data-v-c4af0baa> input</span><span style="color:#F0F3F6;" data-v-c4af0baa>(</span><span style="color:#ADDCFF;" data-v-c4af0baa>&quot;&quot;</span><span style="color:#F0F3F6;" data-v-c4af0baa>)</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>       memory[pointer] </span><span style="color:#FF9492;" data-v-c4af0baa>=</span><span style="color:#DBB7FF;" data-v-c4af0baa> chr</span><span style="color:#F0F3F6;" data-v-c4af0baa>(got_input[</span><span style="color:#91CBFF;" data-v-c4af0baa>0</span><span style="color:#F0F3F6;" data-v-c4af0baa>])</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>   }</span><span style="color:#FF9492;" data-v-c4af0baa>else</span><span style="color:#FF9492;" data-v-c4af0baa> if</span><span style="color:#F0F3F6;" data-v-c4af0baa> command </span><span style="color:#FF9492;" data-v-c4af0baa>==</span><span style="color:#ADDCFF;" data-v-c4af0baa> &#39;[&#39;</span><span style="color:#F0F3F6;" data-v-c4af0baa> {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FF9492;" data-v-c4af0baa>       if</span><span style="color:#F0F3F6;" data-v-c4af0baa> memory[pointer] </span><span style="color:#FF9492;" data-v-c4af0baa>==</span><span style="color:#FFB1AF;font-style:italic;" data-v-c4af0baa> 0</span><span style="color:#F0F3F6;" data-v-c4af0baa> {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>           open_brackets</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#91CBFF;" data-v-c4af0baa> 1</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FF9492;" data-v-c4af0baa>           for</span><span style="color:#DBB7FF;" data-v-c4af0baa> open_brackets</span><span style="color:#F0F3F6;" data-v-c4af0baa> {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>               code_ptr</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#F0F3F6;" data-v-c4af0baa> code_ptr </span><span style="color:#FF9492;" data-v-c4af0baa>+</span><span style="color:#91CBFF;" data-v-c4af0baa> 1</span></span>
<span class="line" data-v-c4af0baa></span>
<span class="line" data-v-c4af0baa><span style="color:#FF9492;" data-v-c4af0baa>               if</span><span style="color:#F0F3F6;" data-v-c4af0baa> code[code_ptr] </span><span style="color:#FF9492;" data-v-c4af0baa>==</span><span style="color:#ADDCFF;" data-v-c4af0baa> &#39;[&#39;</span><span style="color:#F0F3F6;" data-v-c4af0baa> {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>                   open_brackets</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#F0F3F6;" data-v-c4af0baa> open_brackets </span><span style="color:#FF9492;" data-v-c4af0baa>+</span><span style="color:#91CBFF;" data-v-c4af0baa> 1</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>               } </span><span style="color:#FF9492;" data-v-c4af0baa>else</span><span style="color:#FF9492;" data-v-c4af0baa> if</span><span style="color:#F0F3F6;" data-v-c4af0baa> code[code_ptr] </span><span style="color:#FF9492;" data-v-c4af0baa>==</span><span style="color:#ADDCFF;" data-v-c4af0baa> &#39;]&#39;</span><span style="color:#F0F3F6;" data-v-c4af0baa> {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>                   open_brackets</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#F0F3F6;" data-v-c4af0baa> open_brackets </span><span style="color:#FF9492;" data-v-c4af0baa>-</span><span style="color:#91CBFF;" data-v-c4af0baa> 1</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>               }</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>           }</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>       } </span><span style="color:#FF9492;" data-v-c4af0baa>else</span><span style="color:#F0F3F6;" data-v-c4af0baa> {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>           loop_stack </span><span style="color:#FF9492;" data-v-c4af0baa>&lt;&lt;</span><span style="color:#F0F3F6;" data-v-c4af0baa> code_ptr</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>       }</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>   } </span><span style="color:#FF9492;" data-v-c4af0baa>else</span><span style="color:#FF9492;" data-v-c4af0baa> if</span><span style="color:#F0F3F6;" data-v-c4af0baa> command </span><span style="color:#FF9492;" data-v-c4af0baa>==</span><span style="color:#ADDCFF;" data-v-c4af0baa> &#39;]&#39;</span><span style="color:#F0F3F6;" data-v-c4af0baa> {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FF9492;" data-v-c4af0baa>       if</span><span style="color:#F0F3F6;" data-v-c4af0baa> memory[pointer] </span><span style="color:#FF9492;" data-v-c4af0baa>!=</span><span style="color:#FFB1AF;font-style:italic;" data-v-c4af0baa> 0</span><span style="color:#F0F3F6;" data-v-c4af0baa> {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>           code_ptr</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#F0F3F6;" data-v-c4af0baa> loop_stack[</span><span style="color:#FF9492;" data-v-c4af0baa>len</span><span style="color:#F0F3F6;" data-v-c4af0baa>(loop_stack) </span><span style="color:#FF9492;" data-v-c4af0baa>-</span><span style="color:#91CBFF;" data-v-c4af0baa> 1</span><span style="color:#F0F3F6;" data-v-c4af0baa>]</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>       } </span><span style="color:#FF9492;" data-v-c4af0baa>else</span><span style="color:#F0F3F6;" data-v-c4af0baa> {</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>           loop_stack </span><span style="color:#FF9492;" data-v-c4af0baa>&gt;&gt;</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>       }</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>   }</span></span>
<span class="line" data-v-c4af0baa></span>
<span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>   code_ptr</span><span style="color:#FF9492;" data-v-c4af0baa> =</span><span style="color:#F0F3F6;" data-v-c4af0baa> code_ptr </span><span style="color:#FF9492;" data-v-c4af0baa>+</span><span style="color:#91CBFF;" data-v-c4af0baa> 1</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>}</span></span>
<span class="line" data-v-c4af0baa></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true" data-v-c4af0baa><span class="line-number" data-v-c4af0baa>26</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>27</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>28</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>29</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>30</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>31</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>32</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>33</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>34</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>35</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>36</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>37</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>38</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>39</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>40</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>41</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>42</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>43</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>44</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>45</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>46</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>47</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>48</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>49</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>50</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>51</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>52</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>53</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>54</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>55</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>56</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>57</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>58</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>59</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>60</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>61</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>62</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>63</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>64</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>65</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>66</span><br data-v-c4af0baa><span class="line-number" data-v-c4af0baa>67</span><br data-v-c4af0baa></div></div><p data-v-c4af0baa><strong data-v-c4af0baa>Breakdown:</strong></p><ol data-v-c4af0baa><li data-v-c4af0baa>The current code in pointer is stored in the variable <code data-v-c4af0baa>command</code>.</li><li data-v-c4af0baa>All of the other operations done in the if else sections are done as it is defined in the <a href="./#explaining-characters" data-v-c4af0baa>Explaining Characters</a></li></ol><p data-v-c4af0baa>Let&#39;s test the interpreter, by writing a &quot;simple&quot; brainfuck program:</p><div class="language-md vp-adaptive-theme" data-v-c4af0baa><button title="Copy Code" class="copy" data-v-c4af0baa></button><span class="lang" data-v-c4af0baa>md</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-c4af0baa><code data-v-c4af0baa><span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>++++++++++[</span><span style="color:#ADDCFF;" data-v-c4af0baa>&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-</span><span style="color:#F0F3F6;" data-v-c4af0baa>]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.</span></span>
<span class="line" data-v-c4af0baa></span></code></pre></div><p data-v-c4af0baa>The code above is to print <code data-v-c4af0baa>Hello World!</code></p><p data-v-c4af0baa>If we run the interpreter by saving the bf program in helloworld.bf.</p><div class="language-sh vp-adaptive-theme" data-v-c4af0baa><button title="Copy Code" class="copy" data-v-c4af0baa></button><span class="lang" data-v-c4af0baa>sh</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-c4af0baa><code data-v-c4af0baa><span class="line" data-v-c4af0baa><span style="color:#FFB757;" data-v-c4af0baa>danfe</span><span style="color:#ADDCFF;" data-v-c4af0baa> run</span><span style="color:#ADDCFF;" data-v-c4af0baa> main.df</span><span style="color:#ADDCFF;" data-v-c4af0baa> ./helloworld.bf</span></span>
<span class="line" data-v-c4af0baa></span></code></pre></div><div class="language-md vp-adaptive-theme" data-v-c4af0baa><button title="Copy Code" class="copy" data-v-c4af0baa></button><span class="lang" data-v-c4af0baa>md</span><pre class="shiki github-dark-high-contrast" style="background-color:#0a0c10;color:#f0f3f6;" tabindex="0" data-v-c4af0baa><code data-v-c4af0baa><span class="line" data-v-c4af0baa><span style="color:#91CBFF;font-weight:bold;" data-v-c4af0baa># Output</span></span>
<span class="line" data-v-c4af0baa><span style="color:#F0F3F6;" data-v-c4af0baa>Hello World!</span></span>
<span class="line" data-v-c4af0baa></span></code></pre></div><p data-v-c4af0baa>The full code is provided in this github repo: <a href="https://github.com/danfe-df/danfe-v-brainfuk" target="_blank" rel="noreferrer" data-v-c4af0baa>Link</a></p><h2 id="main-takeaway" tabindex="-1" data-v-c4af0baa>Main Takeaway <a class="header-anchor" href="#main-takeaway" aria-label="Permalink to &quot;Main Takeaway&quot;" data-v-c4af0baa>‚Äã</a></h2><p data-v-c4af0baa>Writing an interpreter for brainfuck is <code data-v-c4af0baa>easier</code> than writing an actual brainfuck hello world program. Even tho, I created the whole interpreter I still can&#39;t write a bf program properly. It just shows how incredibly and masterfully the brainfuck esolang was created.</p><p data-v-c4af0baa><a href="https://letterbird.co/sai" target="_blank" rel="noreferrer" data-v-c4af0baa>Reply via Email</a></p><p data-v-c4af0baa><span style="color:gray;font-size:14px;" data-v-c4af0baa>Date: 2024-11-10</span><img src="`+e+'" style="height:170px;position:absolute;right:0;" data-v-c4af0baa></p>',35)]))}const i=s(l,[["render",p],["__scopeId","data-v-c4af0baa"]]);export{F as __pageData,i as default};
