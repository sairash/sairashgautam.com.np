import{_ as i,c as a,a1 as n,o as e}from"./chunks/framework.GKu-Ijuu.js";const g=JSON.parse('{"title":"Teasting VLANG","description":"","frontmatter":{"title":"Teasting VLANG","date":"2024-10-12T00:00:00.000Z"},"headers":[],"relativePath":"blog/2024-10-12/index.md","filePath":"blog/2024-10-12/index.md"}'),t={name:"blog/2024-10-12/index.md"};function l(h,s,p,r,k,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="teasting-vlang" tabindex="-1">Teasting VLANG <a class="header-anchor" href="#teasting-vlang" aria-label="Permalink to &quot;Teasting VLANG&quot;">​</a></h1><p><a href="/blog">&lt;- Back to blogs</a></p><p>While searching, I discovered a programming language called <a href="https://vlang.io" target="_blank" rel="noreferrer">VLANG</a> (or simply &quot;V&quot;). It’s intriguing because its syntax feels very <code>similar</code> to <a href="https://go.dev/" target="_blank" rel="noreferrer">Go</a>, but with a few design choices that make it look even <code>cleaner</code>. For instance, V includes <code>enums</code> and <code>option</code> types, and its error handling is like Go’s—but arguably better. V uses the <code>or</code> keyword for error handling, which makes the code more readable and streamlined.</p><p>Here&#39;s a quick example of error handling in V:</p><div class="language-v vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">v</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> evaluate_x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;How could x be 10?!!!!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Thankgod! x in not 10!!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> evaluate_x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or keyword executes if the function returns with error</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The function returned with error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output_string)</span></span></code></pre></div><p>V uses a similar approach for handling <code>null</code> returns, making it even easier to work with optional values. I’m excited to dig deeper into this language and build something <code>cool</code> with it!</p><p><span style="color:gray;font-size:14px;">Date: 2024-10-12</span></p>`,7)]))}const c=i(t,[["render",l]]);export{g as __pageData,c as default};
